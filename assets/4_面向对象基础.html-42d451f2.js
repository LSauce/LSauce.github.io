import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as n,d as s,e as t,w as e,f as l}from"./app-58d2c58f.js";const u="/assets/image-20221031111018844-955beef3.png",d="/assets/image-20230203113313156-3b92ea73.png",r="/assets/image-20230203114947028-6d2e16d4.png",k="/assets/image-20230206095706735-1fb94616.png",v="/assets/image-20230206113655861-b1c40fbe.png",m={},b=l(`<h1 id="对象和类" tabindex="-1"><a class="header-anchor" href="#对象和类" aria-hidden="true">#</a> 对象和类</h1><p>学习目标:</p><ul><li>掌握对象与类的关系</li><li>掌握如何定义类</li><li>掌握对象的创建与使用</li></ul><h2 id="引例" tabindex="-1"><a class="header-anchor" href="#引例" aria-hidden="true">#</a> 引例</h2><p>张三养了3只狗，一只1岁白色萨摩亚，一只2岁黄白柯基，一只3岁黄色金毛</p><p>解决方案:</p><ul><li>单独变量模拟</li><li>数组方式模拟</li></ul><p>Code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 单独变量解决</span>
        <span class="token comment">// 第一只dog</span>
        <span class="token class-name">String</span> dogName1 <span class="token operator">=</span> <span class="token string">&quot;萨摩耶&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dogColor1 <span class="token operator">=</span> <span class="token string">&quot;白色&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> dogAge1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// 第二只狗</span>
        <span class="token class-name">String</span> dogName2 <span class="token operator">=</span> <span class="token string">&quot;柯基&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dogColor2 <span class="token operator">=</span> <span class="token string">&quot;黄白色&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> dogAge2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token comment">// 第三只狗</span>
        <span class="token class-name">String</span> dogName3 <span class="token operator">=</span> <span class="token string">&quot;金毛&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dogColor3 <span class="token operator">=</span> <span class="token string">&quot;黄色&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> dogAge3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token comment">// 数组方式解决</span>

        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;萨摩耶&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;白色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;柯基&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄白色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;金毛&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黄色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单独变量解决==》不利于数据管理</p><p>数组解决==》数据类型无法体现，取值只能通过下标，变量名跟内容很难关联起来</p><p>缺点：不利于数据管理，效率低</p><p>为了解决上述问题, 我们引入了类与对象.</p><h2 id="对象的概念" tabindex="-1"><a class="header-anchor" href="#对象的概念" aria-hidden="true">#</a> 对象的概念</h2><p>在生活中，我们每个人都是独立的个体，还有一些客观存在的个体，个体之间通过交互共同组成了这个世界。</p><p>面向对象程序的世界就是对现实生活的模拟，就是把现实生活中的场景搬到程序中。</p>`,16),h=n("strong",null,"对象（Object）",-1),g=n("p",null,"对象之间相互协作，共同实现程序的功能。",-1),_=n("strong",null,"对象",-1),y=l('<ul><li><strong>属性</strong>：个体的状态信息（数据）</li><li><strong>行为</strong>：个体能够做什么（操作）</li></ul><h2 id="类的概念" tabindex="-1"><a class="header-anchor" href="#类的概念" aria-hidden="true">#</a> 类的概念</h2><p>现在我们知道了对象对程序世界的重要性，为了完成程序开发，我们程序员的工作就变成了：</p><p>创建一个个对象，并维护对象之间的交互。</p><p>在这个过程中，最基本，最先要解决的问题就是——<strong>对象的创建，怎么得到一个对象呢？</strong></p>',5),w=n("strong",null,'"模板"',-1),q=n("strong",null,"类（class）",-1),f=n("p",null,"也就是说，到目前为止，我们终于可以给我们之前天天用的类（class）下一个明确的定义了：",-1),S=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"创建对象的模板就是类！类就是创建对象的模板！")])],-1),x=n("p",null,"既然类是模板，那么：",-1),j=n("strong",null,"属性和行为",-1),J=n("strong",null,"共性",-1),D=l('<h2 id="类与对象的关系" tabindex="-1"><a class="header-anchor" href="#类与对象的关系" aria-hidden="true">#</a> 类与对象的关系</h2><p>类和对象的关系：</p><ol><li><p>类描述了，同种类型的对象，在属性和行为上的共性特征。</p><p>所以：</p><p>类是抽象的，而对象是具体的，所以对象也称为实例（instance）。</p></li><li><p>类只规定了共性，只是描述对象该有什么属性，该有什么行为。</p><p>但是：</p><p>具体对象属性的取值，即便是同类型对象也可能有差异。一个类可以创建出千千万万个不同的对象。</p></li></ol><figure><img src="'+u+`" alt="image-20221031111018844" tabindex="0" loading="lazy"><figcaption>image-20221031111018844</figcaption></figure><h2 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义" aria-hidden="true">#</a> 类的定义</h2><p>定义类包括定义类本身，和定义类中结构两部分。</p><h3 id="定义一个类" tabindex="-1"><a class="header-anchor" href="#定义一个类" aria-hidden="true">#</a> 定义一个类</h3><p>语法</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>[类修饰符列表] class 类名{
	// 类体
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义类中的成员" tabindex="-1"><a class="header-anchor" href="#定义类中的成员" aria-hidden="true">#</a> 定义类中的成员</h3><p><strong>类中成员分为两部分:</strong></p><ol><li>成员变量: 描述对象的共有属性</li><li>成员方法: 描述对象的共有行为</li></ol><p><strong>如何定义成员变量？</strong></p>`,13),C=n("strong",null,"在类体中，方法外的变量，就称之为成员变量",-1),P=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> 数据类型 成员变量名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意:</strong></p><p>成员变量，在整个类体中生效，在整个类中的成员方法中都可以访问它！</p><p><strong>如何定义成员方法?</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>访问权限修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 方法体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p>`,6),T=n("li",null,"成员方法和我们之前使用的方法不一样，必须没有static修饰！！",-1),V=n("strong",null,"public",-1),M=n("li",null,"其它诸如形参列表，方法体，方法名等结构和之前讲的方法一样。",-1),z=l(`<p>定义一个学生类Demo</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token comment">// 属性</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 行为</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的创建与使用" tabindex="-1"><a class="header-anchor" href="#对象的创建与使用" aria-hidden="true">#</a> 对象的创建与使用</h2><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><p>创建类的对象一般需要在方法中进行，在确定能够创建对象的地方，可以使用以下语法创建对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个语法，我们并不陌生，在Scanner键盘录入的时候，已经见过了，现在做如下解释：</p><ol><li>类名表示创建是何种对象，对象的类型是什么。</li><li>对象名和之前讲的数组名是一个概念，都是引用数据类型的引用。作为一个变量名，对象名遵循小驼峰式的命名规范。</li><li>new关键字表示在堆上开辟空间创建对象，注意代码中的new关键字表示一定会在堆上创建一个独立的对象。</li></ol><p>比如创建一个Student对象，就应该这么写：</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>Student s = new Student();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>请大家思考一个问题：</p><p>如果不创建对象，能够直接访问类中的成员变量和成员方法吗？</p><p>很明显是不可以的</p><p>注意:</p><ol><li><p>无论成员变量还是成员方法，都是属于对象的！必须创建对象才能访问它们！</p></li><li><p>实际上不同对象，访问类中同一个成员变量和成员方法的结果完全可能是不同的！！</p></li></ol><p>对象创建出来后，大致可以做以下操作：</p><ol><li><p>直接输出对象名</p><p>和数组直接输出数组名是一样，默认情况下，直接打印对象名得到的是：</p><ul><li>该类的全限定类名 + &quot;@&quot; + 十六进制的地址值</li><li>可以通过==进行地址值的比较</li></ul></li><li><p>使用对象获取对象的属性和行为：</p><ol><li><p>访问属性（获取属性值和修改属性值）</p><p>语法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>数据类型 变量名 <span class="token operator">=</span> 对象名<span class="token punctuation">.</span>成员变量<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上述方式就可以直接获取属性值了，修改属性值也是类似的做法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>对象名<span class="token punctuation">.</span>成员变量 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：对象中的成员变量，类似于数组对象中的元素，它们都具有默认初始化和默认值！！！</p><p>而具体默认值是什么，也和数组对象中的元素一致，不再赘述！！</p></li><li><p>调用行为（方法）</p><p>语法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>对象名<span class="token punctuation">.</span>成员方法名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果方法有返回值，还可以接收返回值。</p></li></ol></li></ol><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ol><li>类可以嵌套定义称之为内部类， 但是请现在不要嵌套定义类，一个Java文件中定义多个class应该并列而不是包含。</li><li>一个Java文件中的多个class是同包（文件夹）关系。</li><li>一个类当中，应该开门见山的定义成员变量，而后再写成员方法。</li><li>类中没有的属性和行为，对象是不可能有的，类是模板，模板中有才能体现在对象中。</li><li>使用new关键字就会创建新的对象，两条new语句创建的对象是完全独立的。</li><li>成员变量，在类的全局生效，不像局部变量仅在作用域内生效！成员变量，在整个类体中生效，在整个类中的成员方法中都可以访问它！</li></ol><h1 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h1><p>学习目标:</p><ul><li>了解类是一种自定义数据类型</li><li>了解类加载</li></ul><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>先回顾一下，在Java基础语法部分，我们给出的数据类型的概念/定义：</p><blockquote><p>数据类型： <span style="color:red;background:yellow;"><strong>表示的是一组数据的集合，和基于该数据集合的一组合法操作。</strong></span></p></blockquote><p>那么这个定义能不能套在引用数据类型中呢？能否用数据类型的概念来统一基本数据类型和引用数据类型呢？</p><p>在类的定义中，我们知道类中的成员包括2部分：</p><ol><li>成员变量</li><li>成员方法</li></ol><p>成员变量本质上就是数据，成员方法本质上就是操作，那么假设做以下类比：</p><ol><li>数据的集合： 类中成员变量的集合</li><li>操作的集合： 类中成员方法的集合</li></ol><p>于是，就可以做出以下总结：</p><ol><li>一个类的定义，实际上就是定义了一种全新的数据类型，一种自定义的数据类型。</li><li>这种完全不同于基本数据类型的数据类型，我们称之为&quot;引用数据类型&quot;。</li></ol><h2 id="类加载介绍" tabindex="-1"><a class="header-anchor" href="#类加载介绍" aria-hidden="true">#</a> 类加载介绍</h2><p>当我们在程序中使用一个基本数据类型时，由于基本数据类型是JVM当中已经预先定义好的（所以基本数据类型叫&quot;内置数据类型&quot;），JVM可以清楚的知道这个基本数据类型变量在内存中的存储方式（占用空间大小、结构等等），JVM能够正常开辟空间，正常给变量初始化赋值。</p>`,35),A=n("strong",null,"类这种引用数据类型",-1),L=n("p",null,"现在我们要根据一个类来创建它的对象，要让JVM帮助我们开辟空间创建引用和对象，JVM怎么知道到底要创建什么呢？难道它未卜先知吗？",-1),N=n("strong",null,'"认识"',-1),E=n("strong",null,'"认识"',-1),Z=n("strong",null,'"认识"',-1),I=n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"类加载")],-1),R=l('<p>关于类加载：</p><ol><li>类加载的具体过程，我们后面会详细学习。这里我们先不用了解它的详细过程。</li><li>类加载是通过把某个类的二进制字节码文件（class文件）通过I/O流的形式，读取进JVM内存中的方法区实现的。</li><li>通过读取二进制字节码文件，并加载进JVM内存。这是JVM了解这个类型的过程。</li><li>类加载之后，就可以做很多类型相关的操作了。</li><li>类加载要在创建对象之前进行，换句话说创建一个类的对象必然触发该类的类加载！</li></ol><p>我们通过画对象内存图，来展示这一过程：</p><blockquote><ol><li>一个对象的内存图，一个对象的创建过程。(创建1个Student对象)</li><li>三个对象的内存图，其中有两个引用指向同一个对象。(创建3个Teacher对象,并进行显式赋值)</li></ol></blockquote><figure><img src="'+d+'" alt="image-20230203113313156" tabindex="0" loading="lazy"><figcaption>image-20230203113313156</figcaption></figure><figure><img src="'+r+'" alt="image-20230203114947028" tabindex="0" loading="lazy"><figcaption>image-20230203114947028</figcaption></figure><ul><li>关键：</li><li>栈中 ： 局部变量</li><li>堆中 new对象</li><li>方法区 存 类加载信息</li></ul><p><strong>总结：</strong></p><ol><li><p><span style="color:red;background:yellow;"><strong>一个类的类加载在一次程序运行过程中，最多只有一次。</strong></span></p></li><li><p>多个引用指向同一个对象时，某个引用修改了对象的状态（成员变量的取值），再用其它引用访问会得到修改后的结果。</p><p>注：这一点实际上和数组是一样的。</p></li><li><p>类加载IO流操作, 很耗费性能，所以JVM在进行类加载时是<span style="color:red;background:yellow;"><strong>&quot;懒加载&quot;</strong></span>的, 迫不得已才加载.</p><blockquote><p>我们把一定会触发类加载的场景，称之为<span style="color:red;background:yellow;"><strong>类加载的时机</strong></span>，目前已经学过的有：</p><ol><li>首次创建该类对象</li><li>启动该类中的main方法</li></ol></blockquote></li></ol><h1 id="局部变量与成员变量" tabindex="-1"><a class="header-anchor" href="#局部变量与成员变量" aria-hidden="true">#</a> 局部变量与成员变量</h1><p><strong>学习目标:</strong></p><p>掌握局部变量与成员变量的区别</p><p><span style="color:red;background:yellow;"><strong>局部变量</strong></span>和<span style="color:red;background:yellow;"><strong>成员变量</strong></span>是Java程序开发时，最常见的两种变量类型，所以一定要搞清楚，它们之间的不同。</p><h2 id="两者的区别" tabindex="-1"><a class="header-anchor" href="#两者的区别" aria-hidden="true">#</a> 两者的区别</h2><p>局部变量和成员变量的比较，我们从以下五个方面去比较：</p><ol><li>在类中定义的位置不同</li><li>在内存中的位置不同</li><li>生命周期不同</li><li>有无默认初始化不同</li><li>作用范围</li></ol><p><strong>在类中定义的位置不同</strong></p><ol><li>局部变量定义在：方法、方法的形参或者代码块结构等<strong>局部位置</strong>。</li><li>成员变量 定义在：类体中、非局部位置的<strong>成员位置</strong>。</li></ol><p><strong>在内存中的位置不同</strong></p><ol><li>局部变量存储在栈上的栈帧中</li><li>成员变量存储在堆中的对象中</li></ol><p><strong>生命周期不同</strong></p><ol><li><p>局部变量随着方法的执行，而被创建，随着方法的执行结束就会被销毁。<strong>局部变量和方法&quot;同生共死&quot;。</strong></p></li><li><p>成员变量在对象创建以后就存在了，对象被销毁回收内存自然就不存在了。</p><blockquote><p>但实际上只要该对象栈上的引用被销毁，对象成为&quot;垃圾&quot;，对象中的成员变量也就失去意义了。</p></blockquote></li></ol><p><strong>有无默认初始化不同</strong></p><ol><li>局部变量没有默认初始化过程，必须手动初始化赋值。</li><li>成员变量，有默认的初始值。和数组一样，这里不再赘述。</li></ol><p><strong>作用范围</strong></p>',25),B=n("li",null,[n("p",null,"局部变量只在作用域的局部生效。")],-1),O=n("p",null,'成员变量在整个类的成员方法中都可以使用，所以很多书籍也把成员变量称之为"全局变量"。',-1),K=l(`<h2 id="成员变量的赋值" tabindex="-1"><a class="header-anchor" href="#成员变量的赋值" aria-hidden="true">#</a> 成员变量的赋值</h2><p>限于目前的学习进度，其实你只知道两种给成员变量赋值的手段：</p><ol><li><p>默认初始化，具有默认值。</p></li><li><p>显式赋值。即在类中定义成员变量时，直接了当的给出该成员变量的取值，就是显式赋值！比如：</p><p>成员变量的显式赋值演示</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>class Student{
	// 类体
	String name = &quot;张三&quot;；
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>显式赋值和默认初始化赋值的顺序，任何时候都要记住，<span style="color:red;background:yellow;"><strong>对象中的元素，默认初始化永远是第一步！</strong></span>在任何给成员变量赋值的手段执行前，默认初始化都已经执行了！</p>`,4),Q=n("strong",null,'"顺手"',-1),W=l(`<h1 id="this关键字" tabindex="-1"><a class="header-anchor" href="#this关键字" aria-hidden="true">#</a> this关键字</h1><p>学习目标:</p><ul><li>掌握this关键字的使用</li></ul><h2 id="引例-1" tabindex="-1"><a class="header-anchor" href="#引例-1" aria-hidden="true">#</a> 引例</h2><p>学习完对象与类后，做以下练习：</p><blockquote><p>创建一个汽车类，有颜色（color）和速度（speed）两个属性，行为是可以跑（run）。</p><p>实现：</p><ol><li>在run成员方法中访问速度和颜色两个属性，调用该方法查看结果。</li><li>在run成员方法的形参列表中，添加一个局部变量speed，不修改方法体，调用该方法查看结果。</li></ol><p>思考：</p><ol><li>两次方法调用的结果一样吗？为什么？</li><li>如果我想在2中得到1的访问结果，怎么办呢？</li></ol></blockquote><p>code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建Car对象</span>
        car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用成员方法</span>
        <span class="token comment">//car.run();</span>
        car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> car<span class="token punctuation">{</span>
    <span class="token comment">// 定义成员变量</span>
    <span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token string">&quot;黑色&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> speed <span class="token operator">=</span> <span class="token number">120.0</span><span class="token punctuation">;</span>

    <span class="token comment">//// 定义成员方法</span>
    <span class="token comment">//public void run(){</span>
    <span class="token comment">//    System.out.println(color + &quot;的车在高速公路上以&quot; + speed + &quot;公里每小时疾驰!&quot;);</span>
    <span class="token comment">//}</span>


    <span class="token comment">// 定义成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">double</span> speed<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>color <span class="token operator">+</span> <span class="token string">&quot;的车在高速公路上以&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">&quot;公里每小时疾驰!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，由于就近原则的影响：</p>`,9),G=l(`<p>这个时候，如果还想访问同名成员变量，普通的手段是做不到了，就需要this关键字来实现访问。</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p><span style="color:red;background:yellow;"><strong>this关键字（重点）：</strong></span></p><p>Java类中的每个成员方法的形参列表中都隐含了一个传参（隐式传参），传入的是当前对象，用this关键字指向!(为什么类中的所有成员方法都可以访问到成员变量----&gt;就是因为this的存在)</p><p>所以：</p><ol><li><p>this是一个引用，这个引用指向当前对象。</p></li><li><p>何为当前对象？</p><p>很多同学，在初学this时，会经常疑惑何为当前对象呢？</p><p>其实非常简单：</p><p>this指向当前对象，是类中成员方法的一个隐式传参。</p><p>成员方法总会需要一个对象，使用对象名点来调用，那么这个调用该成员方法的对象，就是当前对象！</p></li></ol><p>Demo</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>Student stu = new Student();
stu.study();
stu.sleep();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),U=l(`<p>验证当前对象就是调用方法的那个对象</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>package _04oop.com.cskaoyan._02this._02verfiy;

/**
 * @description:
 * @author: 景天
 * @date: 2022/11/8 9:55
 **/

public class Demo {
    public static void main(String[] args) {
        // 创建对象
        Student student = new Student();
        // 调用方法
        student.printThis();
        // 打印对象
        System.out.println(student);
    }
}

class Student{
    // 定义成员方法
    public void printThis(){
        System.out.println(this);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),F=l(`<h2 id="this关键字的作用" tabindex="-1"><a class="header-anchor" href="#this关键字的作用" aria-hidden="true">#</a> this关键字的作用</h2><p>既然this已经指向当前对象，是一个引用，那么它基本的用途就有：</p><ol><li>在成员方法中，用this引用去访问类中成员变量和调用类中成员方法。由于this本身就是隐含的，所以一般情况下，可以省略this，直接访问类中成员。</li><li>特殊情况下，当成员方法中的局部变量和成员变量同名时，可以用 &quot;this.&quot;访问 来表示访问同名成员变量，来和同名局部变量做区分。这种情况，this是不能省略的。</li><li>在成员方法中只要使用 &quot;this.&quot;访问 一个变量，那么该变量一定是成员变量。在代码比较复杂的情况下，可以显著增加代码可读性, 可以使用this.成员变量对成员变量进行赋值---&gt;set方法</li></ol><h2 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h2><ol><li>this指向当前对象的隐含传参，必须是在普通成员方法中，加static的方法中，没有该this传参。（所以static方法不能直接访问类的成员，需要先创建对象才能访问。）</li><li>既然this指向当前对象，那么不同的this指向的对象必然不同。</li></ol><h1 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h1><h2 id="引例-2" tabindex="-1"><a class="header-anchor" href="#引例-2" aria-hidden="true">#</a> 引例</h2><p>创建一个教师类，有课程和年龄两个属性，行为是上课。</p><p>现在我们需要创建以下对象：</p><ol><li>18岁的Java老师对象</li><li>28岁的C++老师对象</li><li>30岁的Python老师对象</li><li>...</li></ol><p>按照之前我们的做法，需要先创建出对象，再进行成员变量的赋值。</p><p>Code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teacher<span class="token punctuation">.</span>course <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
        teacher<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        teacher<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Teacher</span> teacher2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teacher2<span class="token punctuation">.</span>course <span class="token operator">=</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">;</span>
        teacher2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
        teacher2<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Teacher</span> teacher3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teacher3<span class="token punctuation">.</span>course <span class="token operator">=</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">;</span>
        teacher3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
        teacher3<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果属性很多, 需要创建很多对象，就有点过于麻烦了。</p><p><strong>对象的属性，能不能&quot;出厂&quot;的时候就设定好呢？想要在创建教师对象时，就直接指定这个对象的属性？</strong></p><p>有这种需求时，就需要<span style="color:red;background:yellow;"><strong>构造方法（constructor，也叫构造器）</strong></span>来完成了。</p><h2 id="构造器语法" tabindex="-1"><a class="header-anchor" href="#构造器语法" aria-hidden="true">#</a> 构造器语法</h2><p>构造方法也是方法，但属于一种特殊的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>访问权限修饰符<span class="token punctuation">]</span> 类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// 构造方法体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明:</p><ol><li><p>权限修饰符先使用public</p></li><li><p>构造方法名必须跟类名相同(一模一样,包括大小写)</p></li><li><p>构造方法没有返回值, 也不需要写返回值</p></li><li><p>形参列表可以为空, 称为无参构造方法,非空为有参构造方法</p></li><li><p>构造方法体，和一般方法类似，可以写语句</p></li></ol><h2 id="构造器作用与使用" tabindex="-1"><a class="header-anchor" href="#构造器作用与使用" aria-hidden="true">#</a> 构造器作用与使用</h2><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>构造器的作用是用来给成员变量赋值的，完成对对象的初始化</strong></span></p><p>说明：</p><ol><li>new关键字去创建对象的时候，JVM自动去调用构造方法，构造方法无法通过普通方法的调用方式调用。</li><li>构造器的作用不是创建对象，创建对象是JVM的事情。构造器只是告诉JVM在创建对象过程中，给成员变量赋什么值。</li></ol><p>使用方式是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> 类名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过实参列表的不同，来判断调用哪个构造器。这实际也是方法重载的应用！</strong></p><p>需求:</p><p>使用构造方法改进引例, 在创建教师对象时，就直接指定这个对象的属性(完成成员变量的赋值操作)</p><p>Code:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _04oop<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_03constructor<span class="token punctuation">.</span>_02defineuse<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/11/8 10:04
 **/</span>
<span class="token comment">/*
使用构造方法改进引例, 在创建教师对象时，
就直接指定这个对象的属性(完成成员变量的赋值操作)

1. 18岁的Java老师对象
2. 28岁的C++老师对象
3. 30岁的Python老师对象
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建对象</span>
        <span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Teacher</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Teacher</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;Pyhond&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用方法</span>
        t1<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t3<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义教师类</span>
<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">{</span>
    <span class="token comment">// 定义成员变量</span>
    <span class="token class-name">String</span> course<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">/*
    [访问权限修饰符] 类名(形参列表){
	// 构造方法体
    }
     */</span>

    <span class="token comment">// 无参构造方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 方法体</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无参的构造方法执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 有参构造方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> tCourse<span class="token punctuation">,</span> <span class="token keyword">int</span> tAge<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 方法体</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有2个参数的构造方法执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 给成员变量赋值</span>
        course <span class="token operator">=</span> tCourse<span class="token punctuation">;</span>
        age <span class="token operator">=</span> tAge<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token string">&quot;的老师讲&quot;</span> <span class="token operator">+</span> course<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//public void teach(String name){</span>
    <span class="token comment">//    System.out.println(age + &quot;的老师讲&quot; + course);</span>
    <span class="token comment">//}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项与使用细节" tabindex="-1"><a class="header-anchor" href="#注意事项与使用细节" aria-hidden="true">#</a> 注意事项与使用细节</h2><ol><li><p>一个类中，是允许同时定义多个构造方法的，即构造方法重载，多个构造器的形参必须不同。</p><ul><li>比如: 我们可以给Teacher类定义一个构造器, 用来创建对象的时候, 只指定课程, 不指定年龄</li></ul></li><li><p>构造方法的名字必须和类名一模一样</p></li><li><p>构造器没有返回值</p></li><li><p>构造器是完成对象的初始化(给对象赋值), 并不是创建对象, 创建对象时, 系统根据实参列表自动调用该类的构造器</p></li><li><p>类中默认提供的无参构造方法，是在该类没有任何构造器的情况下才有的。但是如果类中有任一构造器（有参/无参），那么就没有默认无参存在了</p></li><li><p>在构造器中也会隐含this传参, 我们可利用this对成员变量进行赋值, 也可以使用快捷键, alt + insert快速生成构造器.</p></li><li><p>构造器中还可以用this表示调用其它构造器，语法：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示调用类中的其它构造器，根据实参列表决定调用哪个构造器。</p><p><span style="color:red;background:yellow;"><strong>注意，在构造器中使用this(实参)表示调用类中其他构造器时，这行代码一定要处在构造器代码的第一行！</strong></span></p><p>当然，既然必须在第一行，那么也只能用一次了。</p><h2 id="构造器的赋值顺序" tabindex="-1"><a class="header-anchor" href="#构造器的赋值顺序" aria-hidden="true">#</a> 构造器的赋值顺序</h2><p>这里我们不妨总结一下，学完构造器后，三种给成员变量赋值的方式：</p>`,40),H=l(`<p>通过下面的例子分析程序执行流程 , 以上三种赋值方式的执行顺序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建Person对象,成员变量的值分别是什么</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行流程:</p><ol><li>加载Person类信息, 只会加载一次</li><li>堆中分配空间</li><li>完成对象初始化 <ol><li>默认初始化</li><li>显示赋值</li><li>构造器赋值</li></ol></li><li>堆中的对象的地址返回给p(对象的引用)</li></ol><p><span style="color:red;background:yellow;"><strong>在各式各样给成员变量赋值的方式中，构造器是最后执行的！！！</strong></span></p><h2 id="对象创建流程" tabindex="-1"><a class="header-anchor" href="#对象创建流程" aria-hidden="true">#</a> 对象创建流程</h2><p><strong>Debug练习 对于下列程序代码，请指出创建Student对象，程序每一步的执行流程：</strong></p><p>构造器Debug模式练习</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&quot;王冰冰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Student age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Student age，name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个案例中，我们发现Student双参构造器中，有使用this调用单参构造器，那么它们的执行顺序是：</p><ol><li>类加载不要忘记了。</li><li>程序会先找到，Student的双参构造器，但是并不会执行，而是</li><li>先跳转执行this构造器，但是this构造器中的代码，也不会立刻执行（因为构造器赋值一定最后执行），而是</li><li>先从上到下执行成员变量的显示赋值，然后</li><li>跳回执行this构造器代码</li><li>最后执行双参构造器代码</li></ol><h1 id="小练习" tabindex="-1"><a class="header-anchor" href="#小练习" aria-hidden="true">#</a> 小练习</h1><h2 id="对象与类" tabindex="-1"><a class="header-anchor" href="#对象与类" aria-hidden="true">#</a> 对象与类</h2><p>完成以下案例，思考一下怎么能够找到系统中类、对象究竟是哪些？</p><ol><li>用面向对象的思想模拟LOL当中盖伦的战斗</li><li>用面向对象的思想模拟植物大战僵尸</li></ol><p>如何从需求中找到对象和类呢？</p><p>对象描述的是程序世界中的个体/实体，所以一般都是名词。</p><p>抽取出全体对象的共性特征，也就是成员变量和方法，就可以定义一个类。</p><p>注意事项：</p><ol><li><p>对象之间如果需要交互，可以考虑持有对方的引用作为成员变量。</p></li><li><p>日常开发中，不建议随便把很多类定义在同一个Java文件中。</p><blockquote><p>正确情况下，建议一个Java文件中，仅定义一个public class和文件名保持一致。</p><p>当然，如果确有需求，也是可以定义非public class的。（少见但不是见不到）</p></blockquote></li><li><p>一个Java文件下的所有类，属于同包关系。</p></li></ol><p>LOL</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Legend</span> galen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Legend</span><span class="token punctuation">(</span><span class="token string">&quot;Galen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默打击&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;勇气&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;爱的魔力转圈圈&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大宝剑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        galen<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 英雄类</span>
<span class="token keyword">class</span> <span class="token class-name">Legend</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token class-name">String</span> skillQ<span class="token punctuation">;</span>
    <span class="token class-name">String</span> skillW<span class="token punctuation">;</span>
    <span class="token class-name">String</span> skillE<span class="token punctuation">;</span>
    <span class="token class-name">String</span> skillR<span class="token punctuation">;</span>

    <span class="token comment">/*
        定义构造器,从代码规范上来说,构造器写在
        成员变量的下面
        成员方法的上面
        而且都要写在一起(实际上所有构造方法重载的方法都应该写在一起)
        写在一起的顺序: 可以按照参数个数的多少去排列,个数少的在上面,多的在下面
      */</span>
    <span class="token keyword">public</span> <span class="token class-name">Legend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Legend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> skillQ<span class="token punctuation">,</span> <span class="token class-name">String</span> skillW<span class="token punctuation">,</span> <span class="token class-name">String</span> skillE<span class="token punctuation">,</span> <span class="token class-name">String</span> skillR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>skillQ <span class="token operator">=</span> skillQ<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>skillW <span class="token operator">=</span> skillW<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>skillE <span class="token operator">=</span> skillE<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>skillR <span class="token operator">=</span> skillR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;名字为&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;的英雄,正在使用&quot;</span><span class="token operator">+</span>skillR<span class="token operator">+</span><span class="token string">&quot;技能战斗!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>植物大战僵尸</p><figure><img src="`+k+`" alt="image-20230206095706735" tabindex="0" loading="lazy"><figcaption>image-20230206095706735</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plant</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> price<span class="token punctuation">;</span>
    <span class="token keyword">int</span> hp<span class="token punctuation">;</span>
    <span class="token comment">// 攻击力</span>
    <span class="token keyword">int</span> damage<span class="token punctuation">;</span>
    <span class="token comment">/*
        在开发中为了方便两个对象之间的交互
        往往会让某个对象持有另外一个对象的引用作为自身的成员变量
        这样对象之间的交互会更加灵活,是常用的做法
     */</span>
    <span class="token class-name">Zombie</span> plantZ<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Plant</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span> damage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 行为</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;正在攻击&quot;</span> <span class="token operator">+</span> plantZ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beAttacked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;正在被&quot;</span> <span class="token operator">+</span> plantZ<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;攻击,现在还剩下&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hp <span class="token operator">-</span> plantZ<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zombie</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> hp<span class="token punctuation">;</span>
    <span class="token comment">// 攻击力</span>
    <span class="token keyword">int</span> damage<span class="token punctuation">;</span>
    <span class="token keyword">double</span> speed<span class="token punctuation">;</span>

    <span class="token class-name">Plant</span> zombieP<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Zombie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Zombie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span> damage<span class="token punctuation">,</span> <span class="token keyword">double</span> speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>damage <span class="token operator">=</span> damage<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 行为</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;正在攻击&quot;</span> <span class="token operator">+</span> zombieP<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beAttacked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;正在被&quot;</span> <span class="token operator">+</span> zombieP<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;攻击,现在还剩下&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hp <span class="token operator">-</span> zombieP<span class="token punctuation">.</span>damage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;正在以&quot;</span> <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">&quot;的速度,接近你的脑子~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;吃掉了你的脑子~真香~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="值传递练习" tabindex="-1"><a class="header-anchor" href="#值传递练习" aria-hidden="true">#</a> 值传递练习</h2><p>学习对象与类后，再复习一下如果方法的参数是需要一个对象，值传递是怎样进行的。</p><blockquote><p>练习：<br> 定义一个学生类，该类具有一个int属性age<br> 1.在测试类中写一个方法，交换两个Student对象的age属性<br> 请问能够交换成功吗？原因是什么？</p><p>2.在测试类中写一个方法，交换两个Student对象的引用（地址）<br> 请问能够交换成功吗？原因是什么？</p></blockquote><p>结论：</p><ol><li>Java只有值传递</li><li>Java当中的方法可以改变对象的状态（成员变量的取值）但是无法直接交换两个引用（无法改变局部变量）</li></ol><h2 id="成员变量赋值顺序练习" tabindex="-1"><a class="header-anchor" href="#成员变量赋值顺序练习" aria-hidden="true">#</a> 成员变量赋值顺序练习</h2><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class Demo {
 public static void main(String[] args) {
     Student s = new Student(18, &quot;长风&quot;);
     System.out.println(s.age);
     System.out.println(s.name);
     System.out.println(s.var);
     System.out.println(s.cat.price);
 }
}
class Student {
 int age = 10;
 String name = &quot;张三&quot;;
 double var = 20;

 public Student(int age) {
     System.out.println(&quot;Student age&quot;);
     this.age = age;
 }

 public Student() {
 }

 public Student(int age, String name) {
     this(age);
     System.out.println(&quot;Student age,name&quot;);
     this.name = name;
 }

 Cat cat = new Cat(1000);
 Cat c2;
}

class Cat {
 double price;

 public Cat() {
 }

 public Cat(double price) {
     System.out.println(&quot;Cat price&quot;);
     this.price = price;
 }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思考程序输出的顺序，搞清楚其中赋值的顺序。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.Demo类加载,main方法执行
2.Student类加载,创建Student对象,调用2参构造
3.此时2参构造不会执行,会因为this(单参)调用单参构造,
4.此时单参构造不会执行,会先对对象中成员变量默认初始化,进行默认赋值
5.进行显式赋值
6.Cat cat = new Cat(1000);执行到这里,会触发Cat类加载
7.调用Cat单参构造方法
8.Cat单参构造方法先不执行,先默认赋值,没有显式赋值,执行构造方法进行赋值
9.Student类中的成员全部显式赋值成功---&gt;进行构造器赋值
10.Student的单参构造器先执行,再执行两参构造器
11.Student对象创建成功并完成了赋值---&gt;回到main方法继续执行
12.输出相应结果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="static关键字" tabindex="-1"><a class="header-anchor" href="#static关键字" aria-hidden="true">#</a> static关键字</h1><p>学习目标:</p><ul><li>掌握静态成员变量的使用与特点</li><li>掌握静态成员方法的使用与特点</li><li>掌握静态与非静态的区别</li></ul><h2 id="引例-3" tabindex="-1"><a class="header-anchor" href="#引例-3" aria-hidden="true">#</a> 引例</h2><p>场景如下:</p><p>一场篮球比赛, 梦之队有5名顶级球员Kobe, James, Stephen...... 都是神射手擅长投3分,投篮必进</p><p>每进一球, 队伍分数+3, 比赛结束, 统计一下该队伍得分情况, 写程序模拟这个场景.</p><p>思路:</p><ul><li>main里面定义int count, 用来记录分数</li><li>每当有1个球员进球, 分数+3</li></ul><p>Code:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _04oop<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_04static<span class="token punctuation">.</span>_01introuction<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/11/11 9:48
 **/</span>
<span class="token comment">/*
一场篮球比赛, 梦之队有5名顶级球员Kobe, James, Stephen...... 都是神射手擅长投3分,投篮必进

每进一球, 队伍分数+3, 比赛结束, 统计一下该队伍得分情况,  写程序模拟这个场景.

思路:

- main里面定义int count, 用来记录分数
- 每当有1个球员进球, 分数+3
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义一个计数器</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">Player</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&quot;Kobe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分数: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Player</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p2<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分数: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Player</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&quot;Stephen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p3<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分数: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个Player类</span>
<span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义成员变量</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;进球了!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题分析:</p><p>int count这个值是个局部变量, 独立于对象之外的, 使用起来不是很方便</p><p>引出来static关键字.</p><h2 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h2><p>根据static修饰的内容不同, 有以下分类</p><ul><li><strong>静态成员变量</strong>, static修饰成员变量 (有的资料里也称为<strong>类变量</strong>, <strong>类属性</strong>指的都是静态成员变量)</li><li><strong>静态成员方法</strong>, static修饰成员方法(有的资料里也称为<strong>类方法</strong>, 指的还是静态成员方法)</li></ul><p>统称为类的静态成员</p><h3 id="静态成员变量" tabindex="-1"><a class="header-anchor" href="#静态成员变量" aria-hidden="true">#</a> 静态成员变量</h3><p><strong>基本语法</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[访问权限修饰符] static 数据类型 变量名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用与特点:</strong></p>`,56),X=n("li",null,"和普通成员变量一样,都具有默认值（默认值和普通成员变量是一样的）",-1),Y=n("li",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"静态成员变量属于类的，完全不需要创建对象使用。")])],-1),$=n("strong",null,'"对象名."',-1),nn=n("strong",null,'"类名."',-1),sn=n("li",null,"静态成员变量的访问/赋值/使用都不依赖于对象, 而是依赖于类",-1),an=l(`<p>使用案例:</p><p>设计一个int 类型的count值来表示球队得分, 每有一个球员得分, 那么count值+3, 要求count被所有对象所共享的即可. 使用静态成员变量修改之前的引例.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token comment">// 使用static关键字修饰成员变量, 使其成为静态成员变量.</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _04oop<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_04static<span class="token punctuation">.</span>_02static_field<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/11/11 9:58
 **/</span>
<span class="token comment">/*
设计一个int 类型的count值来表示球队得分, 每有一个球员得分,
那么count值+3, 要求count被所有对象所共享的即可. 使用静态成员变量修改之前的引例.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 静态成员变量可以通过类名.方式访问</span>
        <span class="token comment">// 推荐使用类名.方式访问 </span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;得分: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Player</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Player对象</span>
        <span class="token class-name">Player</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&quot;Kobe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 投篮</span>
        p1<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更改分数 + 3</span>
        p1<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;得分: &quot;</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Player对象</span>
        <span class="token class-name">Player</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 投篮</span>
        p2<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更改分数 + 3</span>
        p2<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;得分: &quot;</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Player对象</span>
        <span class="token class-name">Player</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&quot;Stephen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 投篮</span>
        p3<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更改分数 + 3</span>
        p3<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;得分: &quot;</span> <span class="token operator">+</span> p3<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个Player类</span>
<span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义成员变量</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// 定义一个静态的成员变量,表示球队得分</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;进球了!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存及原理解析:</p><p>静态成员的访问并不依赖于创建对象，可以直接通过类名访问，其原因在于：</p>`,7),tn=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"某个类的某个静态成员变量只有一份")]),s("，且被所有对象共享，属于类，无需创建对象使用。")],-1),en=n("figure",null,[n("img",{src:v,alt:"image-20230206113655861",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230206113655861")],-1),ln=n("p",null,"注意事项:",-1),pn=l(`<blockquote><p>局部变量，已经被方法限制了作用域，不能用static修饰它！</p></blockquote><h3 id="静态成员方法" tabindex="-1"><a class="header-anchor" href="#静态成员方法" aria-hidden="true">#</a> 静态成员方法</h3><p><strong>基本语法</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[访问权限修饰符] static 返回值类型 方法名(形参列表){
	//方法体
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用与特点</strong></p><ul><li>无需创建对象就可以直接通过类名点直接调用。</li><li>同一个类中的static方法互相调用可以省略类名，直接用方法名调用。（这就是我们之前方法的调用）</li></ul><p>注意事项:</p><ol><li><p>一个类中，静态方法无法直接调用非静态的方法和属性，也不能使用this，super关键字（super后面会讲）,静态的方法只能访问静态的</p></li><li><p>经典错误：Non-static field/method xxx cannot be referenced from a static context</p></li><li><p>原因：静态方法调用的时候，完全有可能没有对象，没有对象普通成员就无法访问。</p></li><li><p>普通成员方法当中，既可以访问静态成员的, 也可以访问非静态成员。普通成员方法访问任意的</p></li><li><p>访问静态成员变量的时候，使用类名.变量名的形式访问，以示区别，增加代码可读性</p></li></ol><h2 id="类加载时机" tabindex="-1"><a class="header-anchor" href="#类加载时机" aria-hidden="true">#</a> 类加载时机</h2><p>静态成员需要在类加载时期，完成准备，类加载结束就能够使用。</p><p>所以<span style="color:red;background:yellow;"><strong>访问类的静态成员，一定会触发该类的类加载。</strong></span></p><p>总结，到目前学习过的类加载时机：</p><ol><li>new直接创建该类的对象。(<strong>首次</strong>)</li><li>启动该类中的main方法。</li><li>访问该类的静态成员（方法和变量) (<strong>首次</strong>)</li></ol><h2 id="static-vs-非static" tabindex="-1"><a class="header-anchor" href="#static-vs-非static" aria-hidden="true">#</a> static VS 非static</h2><p>当我们了解static成员的特点后，静态成员和非静态成员的区别就很明显</p><p>我们从以下四个角度比较（拿成员变量为例）</p><p>总结：</p><ol><li>成员的所属 <ul><li>静态成员 属于类，也可称类变量</li><li>成员变量属于对象</li></ul></li><li>在内存中的位置 <ul><li>静态成员 在堆中 该类Class字节码文件对象上</li><li>成员变量在堆中 ，该类对象中</li></ul></li><li>在内存中出现的时间 <ul><li>静态成员， 类加载 连接中 验证 - 准备 - 解析的 准备阶段出现</li><li>在对象生成是出现</li></ul></li><li>调用方式 <ul><li>类名.静态成员</li><li>对象名.成员</li></ul></li></ol><p>其比较的结论如下：</p><ul><li><strong>所属不同</strong><ol><li>静态成员变量属于类，所以也称为为类变量</li><li>（普通）成员变量属于对象，所以也称为对象变量（实例变量）</li></ol></li><li><strong>在内存中的位置不同</strong><ol><li>静态变量存储于方法区的静态域(堆上的这个类所对应的字节码文件对象,即Class对象中)，被所有对象共享</li><li>成员变量存储于堆内存，每个对象独享自己的成员变量</li></ol></li><li><strong>在内存中出现时间不同</strong><ol><li>静态变量随着类的加载而加载，比成员变量出现的要早</li><li>成员变量随着对象的创建而存在</li></ol></li><li><strong>调用方式不同</strong><ol><li>静态变量可以通过类名调用，也可以通过对象调用（不推荐）</li><li>成员变量只能通过对象名调用，必须创建对象</li></ol></li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>这里，根据static关键字的一些特点来明确它的使用场景，给大家以后使用static关键字做一下参考。</p>`,22),on=l(`<li><p>静态成员变量：</p><ol><li><strong>属于全体对象所共享而不是独属于某个对象的成员变量</strong></li></ol><blockquote><p>所以当存在需要所有对象共享的变量时，应该使用static修饰的静态成员变量。</p></blockquote><ol start="2"><li><strong>在整个类全局独一份的（因为类加载只有一次）</strong></li></ol><blockquote><p>所以，如果希望某个变量在类的全局独一份时，应该使用static修饰的静态成员变量。</p></blockquote><p>举例1 :</p><p>创建一个学生类，用来描述我们班全体同学</p><p>要求：</p><p>属性：姓名，性别，年龄，学号，学校信息</p><p>行为：吃饭，学习</p><p>我们简单思考可以知道, 无论你是张三或者李四, 学校信息这个属性实质上应该是被全体同学所共有的属性，而不是独属于某个对象的, 这种场景下就可以使用static 修饰学校信息</p><p>举例2:</p><p>创建一个学生类, 有2个属性: 姓名String name , 学号int id</p><p>统计外部创建Student类对象的个数 假设给Student类的对象自动编号</p><p>这个编号第一次创建对象是10001 随后每创建一个新对象就+1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _04oop<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_04static<span class="token punctuation">.</span>_05use_case<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/11/11 15:04
 **/</span>
<span class="token comment">/*
利用了static成员变量类全局唯一 且被共享
统计外部创建Student类对象的个数  假设给Student类的对象自动编号
这个编号第一次创建对象是10001 随后每创建一个新对象就+1

 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Student</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Student</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;共计创建了&quot;</span> <span class="token operator">+</span> <span class="token class-name">Student</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">&quot;个学生&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token comment">// 姓名</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">// 学号</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token comment">// 统计学生数量</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token comment">// 初始学号</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> initNumber <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 学生数量+1</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 学号递增</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> initNumber<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),cn=n("p",null,"静态成员方法：",-1),un=n("strong",null,"调用简单，无需创建对象即可调用。",-1),dn=n("blockquote",null,[n("p",null,"所以如果希望一个方法能够更方便快捷的去调用，可以把它声明为static修饰的静态成员方法。")],-1),rn=n("ol",{start:"2"},[n("li",null,"根据静态成员方法调用简单的特点，当一个类中全部都是静态成员方法时，")],-1),kn=n("blockquote",null,[n("p",null,[s("类中的所有方法的调用都可以使用类名点去完成，这就是Java当中的"),n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,'"工具类"')]),s("。比较典型的有：数组工具类Arrays、集合工具类Collections、数学工具类Math等等。")])],-1),vn=l(`<h2 id="static执行顺序练习" tabindex="-1"><a class="header-anchor" href="#static执行顺序练习" aria-hidden="true">#</a> static执行顺序练习</h2><p>请说明程序的输出结果，并分析流程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
<span class="token keyword">static</span> <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span> dog2<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">Dog</span> dog3<span class="token punctuation">;</span> 

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Demo</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
<span class="token keyword">static</span> <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>你能得出什么结论?</summary> 1.静态成员变量的显式赋值，是在类加载过程中执行的。不管何种方式触发该类的类加载，这个过程都要执行。<br> 2.类加载可以连环触发，一个类可以最先开始类加载，但是不一定会最先完成类加载<br> 3.无论是静态成员变量还是成员变量，只有声明且没有其它任何赋值方式赋值，那就只有默认值。 </details><h1 id="匿名对象" tabindex="-1"><a class="header-anchor" href="#匿名对象" aria-hidden="true">#</a> 匿名对象</h1><p>学习目标:</p><ul><li>掌握匿名对象的概念</li><li>掌握匿名对象的用途与特点</li></ul><h2 id="什么是匿名对象" tabindex="-1"><a class="header-anchor" href="#什么是匿名对象" aria-hidden="true">#</a> 什么是匿名对象</h2><p>在Java当中，匿名对象指的就是没有名字的对象。</p>`,9),mn=n("strong",null,"在创建对象时，就没有引用指向的对象，就是匿名对象！",-1),bn=l(`<p>匿名对象的语法很简单，只需要在方法等位置中写下列语法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上语法就得到了一个匿名对象，从实质上看：</p>`,3),hn=n("strong",null,"匿名对象",-1),gn=n("h2",{id:"匿名对象的用途",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#匿名对象的用途","aria-hidden":"true"},"#"),s(" 匿名对象的用途")],-1),_n=n("p",null,"匿名对象主要有两个用途（常见用途）：",-1),yn=n("p",null,"使用匿名对象作为方法的实参",-1),wn=n("p",null,[s("当定义以下方法时，表示该方法需要传入一个对象（"),n("strong",null,'这个对象必须是"类名"的对象或者子类对象'),s("）")],-1),qn=l(`<div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>[修饰符列表] 返回值类型 方法名(类名 对象名){
	//方法体
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这个时候，常规的做法是创建对象，然后传入引用。但实际上这里可以直接传入匿名对象。</strong></p><p>假如一个test方法需要传入一个Student对象，就可以这么写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),fn=n("p",null,"使用匿名对象作为方法的返回值",-1),Sn=n("p",null,[s("当定义以下方法时，表示该方法需要传入一个对象（"),n("strong",null,'这个对象必须是"类名"的对象或者子类对象'),s("）")],-1),xn=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> 类名 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//方法体</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>匿名对象<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),jn=n("h2",{id:"匿名对象的优缺点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#匿名对象的优缺点","aria-hidden":"true"},"#"),s(" 匿名对象的优缺点")],-1),Jn=n("blockquote",null,[n("p",null,[n("strong",null,"优点：")])],-1),Dn=n("p",null,'匿名对象在使用完毕后会立刻成为"垃圾"等待GC回收，从理论角度上来说，可以提升内存利用率。',-1),Cn=n("strong",null,"GC不具有即时性",-1),Pn=n("blockquote",null,[n("p",null,[n("strong",null,"缺点：")])],-1),Tn=n("strong",null,"一次性的",-1),Vn=l(`<h2 id="匿名对象使用场景" tabindex="-1"><a class="header-anchor" href="#匿名对象使用场景" aria-hidden="true">#</a> 匿名对象使用场景</h2><blockquote><p>我们根据匿名对象的优缺点，很容易总结出匿名对象的使用场景：</p></blockquote><ol><li>需要一个对象去实现功能，并且该对象仅需使用一次即可，为了代码简洁，推荐使用匿名对象</li><li>但是，如果一个对象可能会被复用，像以下代码频繁创建匿名对象是得不偿失的</li></ol><p>不要滥用匿名对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建对象是需要耗时耗费内存空间的，不要为了一时的方便，频繁创建匿名对象。</strong></p><p>总之：</p><p>如果某个对象，仅使用一次，使用匿名对象简洁方便。</p><p>但如果有多次使用某个类的对象的需求时，频繁使用匿名对象会导致频繁创建对象，降低代码性能，得不偿失！</p><h1 id="代码块" tabindex="-1"><a class="header-anchor" href="#代码块" aria-hidden="true">#</a> 代码块</h1><p><strong>学习目标</strong></p><ul><li>掌握代码块的几种分类</li><li>掌握代码块的作用与特点</li><li>掌握几种代码块的执行顺序</li></ul><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>之前，我们理解的代码块就是为了限制局部变量的一个大括号，今天来详细的学习一下代码块。</p><p>代码块的定义：由若干条Java语句组成，并且用一对大括号括起来的结构，叫做代码块。</p><p>代码块的分类，根据其位置和声明方式的不同，可以分为：</p><ul><li><p>局部代码块</p></li><li><p>构造代码块</p></li><li><p>静态代码块</p></li><li><p>同步代码块</p></li></ul><p>注：同步代码块，涉及多线程知识，后面多线程再学习，今天略过它。</p><h2 id="构造代码块" tabindex="-1"><a class="header-anchor" href="#构造代码块" aria-hidden="true">#</a> 构造代码块</h2><h3 id="语法定义" tabindex="-1"><a class="header-anchor" href="#语法定义" aria-hidden="true">#</a> 语法定义</h3><p><strong>什么是构造代码块 ？</strong></p><ul><li>定义在类的成员位置，使用以下声明方式声明的代码块，称之为构造代码块。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//成员位置</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 局部位置</span>
<span class="token punctuation">}</span>
<span class="token comment">//成员位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个语法只有一个需要注意的地方：</p>`,24),Mn=n("h3",{id:"作用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作用","aria-hidden":"true"},"#"),s(" 作用")],-1),zn=n("p",null,"随着构造器的执行，用于在创建对象过程中，给成员变量赋值",-1),An=n("p",null,"这里总结给成员变量赋值的几种方式（创建对象过程中）：",-1),Ln=n("ul",null,[n("li",null,"默认初始化，具有默认值"),n("li",null,"显式赋值"),n("li",null,"构造代码块"),n("li",null,"构造器")],-1),Nn=n("strong",null,'"掐头去尾"',-1),En=n("blockquote",null,[n("p",null,"我们程序员所有能干预的赋值方式，都是在默认初始化的基础上进行的。")],-1),Zn=n("strong",null,"显式赋值",-1),In=n("strong",null,"构造代码块",-1),Rn=n("p",null,"经过代码测试，我们发现：",-1),Bn=l(`<ol><li>这两个结构，谁写在代码书写顺序的上面，谁就先执行。</li><li>后执行结构的结构，自然会覆盖先执行结构的结果。</li></ol><p>这样，类中显然会出现类似以下代码：</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>//构造代码块
{
	a = 10;
}
int a = 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种代码形式，按照从上到下的顺序来看的话，显然有些奇怪——成员变量还未定义，却进行了赋值。</p>`,4),On=n("h3",{id:"原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#"),s(" 原理")],-1),Kn=n("strong",null,"反编译class文件（通过IDEA）",-1),Qn=n("strong",null,"构造代码块",-1),Wn=n("p",null,[n("strong",null,"直接将成员变量的显式赋值和构造代码块中的代码智能地加入，类所有的构造器中的前几行：")],-1),Gn=n("p",null,[n("strong",null,[n("span",{style:{color:"red",background:"yellow"}},"所谓智能是为了保证："),s("成员变量的显式赋值和构造代码块，按照代码的书写顺序从上到下执行！")])],-1),Un=n("p",null,"于是，我们可以得出以下结论：",-1),Fn=n("li",null,"使用new对象的方式创建对象，不论使用哪个构造器，构造代码块都会随之执行。",-1),Hn=n("li",null,"构造器是每一次new对象都会执行一次，所以构造代码块也会随之执行一次。",-1),Xn=n("strong",null,"所以在同一个类中，构造代码块总是先于它的构造器而执行。",-1),Yn=n("h3",{id:"创建对象过程中的执行顺序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建对象过程中的执行顺序","aria-hidden":"true"},"#"),s(" 创建对象过程中的执行顺序")],-1),$n=n("blockquote",null,[n("p",null,"总结一下到目前为止，创建对象过程中可能碰到的结构的执行顺序：")],-1),ns=n("p",null,"new对象过程中，各种结构的执行顺序：",-1),ss=n("li",null,[n("p",null,"对象结构存在后就进行默认初始化，所有成员变量都具有默认值后，再开始其余赋值操作")],-1),as=n("p",null,"找到new对象的那个构造器",-1),ts=n("ol",null,[n("li",null,"如果它的首行显式地调用了另一个构造器this(实参)")],-1),es=n("p",null,[n("strong",null,"（注：显式调用构造器目前指的是this调用自身构造器，其它场景这里先不考虑）")],-1),ls=n("p",null,"那么程序会先跳转到那个构造器，但是不会立刻执行，而是：",-1),ps=n("ol",null,[n("li",null,"按照类中构造代码块和显式赋值的代码书写顺序，从上到下执行其中的代码，执行完毕后："),n("li",null,"跳转回this语句要指示执行的构造器，执行其中的代码，然后："),n("li",null,"跳转回new对象构造器，执行完毕后，创建对象结束。")],-1),os=n("ol",{start:"2"},[n("li",null,"如果它的首行没有显式调用另一个构造器")],-1),is=n("p",null,"那么会先从上到下执行构造代码块和显式赋值代码，执行完毕后：",-1),cs=n("p",null,"跳转回new对象构造器，执行完毕后，创建对象结束。",-1),us=n("h3",{id:"实际用途",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实际用途","aria-hidden":"true"},"#"),s(" 实际用途")],-1),ds=n("p",null,"构造代码块最大的特点就是其中的代码，最终会加入类的所有构造器中，所以依据这一点：",-1),rs=n("strong",null,'"提取公因式"',-1),ks=n("li",null,[n("p",null,"其次，构造代码块毕竟是给成员变量赋值用的，所以："),n("blockquote",null,[n("p",null,"如果需要很复杂的代码完成成员变量的赋值（如果只是给一个值，用显式赋值和构造器足矣）"),n("p",null,"比如需要一个算法，需要一定计算等等。在这些场景下，使用构造代码块赋值也是一个不错的选择。")])],-1),vs=l(`<h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><ol><li><p>创建一个类Student，类中有多个构造器，请写代码统计外部创建Student对象的次数。</p></li><li><p>读程序题：</p><p>代码块练习题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">&quot;紫色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;age building block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token string">&quot;黄色&quot;</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
        color <span class="token operator">=</span> <span class="token string">&quot;黑色&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;color building block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;age constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;age color constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说出程序输出的顺序，并说明原因。</p></li><li><p>最后思考：构造代码块能不能用于给静态成员变量赋值？</p></li></ol><h2 id="静态代码块" tabindex="-1"><a class="header-anchor" href="#静态代码块" aria-hidden="true">#</a> 静态代码块</h2><h3 id="语法定义-1" tabindex="-1"><a class="header-anchor" href="#语法定义-1" aria-hidden="true">#</a> 语法定义</h3><p><strong>什么是静态代码块？</strong></p><p>定义在类的成员位置，使用以下声明方式声明的代码块，称之为静态代码块</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//成员位置</span>
<span class="token keyword">static</span><span class="token punctuation">{</span>
	<span class="token comment">// 局部位置</span>
<span class="token punctuation">}</span>
<span class="token comment">//成员位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个语法只有一个需要注意的地方：</p>`,8),ms=n("h3",{id:"作用-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作用-1","aria-hidden":"true"},"#"),s(" 作用")],-1),bs=n("blockquote",null,[n("p",null,"静态代码块在类中的作用")],-1),hs=n("p",null,[n("strong",null,"随着类加载的过程而执行，静态代码块可以看成是一个在类加载过程中，会自动调用的静态方法！用于给静态成员变量赋值！")],-1),gs=n("strong",null,"一般的静态成员方法是调用才会执行，并不是类加载过程中就会自动调用执行它！",-1),_s=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"想要一段语句，能够在类加载过程中自动被调用，需要使用静态代码块，而不是静态方法！！")])],-1),ys=n("p",null,"这里总结一下给静态成员变量赋值的几种方式（类加载时期）：",-1),ws=n("ol",null,[n("li",null,"默认初始化，具有默认值"),n("li",null,"显式赋值"),n("li",null,"静态代码块")],-1),qs=n("strong",null,"显式赋值",-1),fs=n("strong",null,"静态代码块赋值",-1),Ss=n("ol",null,[n("li",null,"按照代码的书写顺序去执行，谁写在代码顺序的上面，谁就先执行。"),n("li",null,"后执行结构的结果，会覆盖掉先执行结构的结果。")],-1),xs=n("p",null,[n("strong",null,"至于说到原理，静态代码块的执行，是JVM层面进行类加载的一种设计机制，是类加载的特殊设计机制保证的。")],-1),js=n("h3",{id:"实际用途-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实际用途-1","aria-hidden":"true"},"#"),s(" 实际用途")],-1),Js=n("blockquote",null,[n("p",null,"数据库中加载JDBC驱动（最经典的），也可能是最常见的。")],-1),Ds=n("p",null,"比如一些初类的始化工作，就可以放在静态代码块中完成。",-1),Cs=n("p",null,"最常见的就是类System的初始化，源码如下：",-1),Ps=n("img",{src:"https://hixiaodong123.oss-cn-hangzhou.aliyuncs.com/typora/202203201845289.png?align=center",alt:"System类源码",style:{zoom:"15%"}},null,-1),Ts=n("strong",null,"registerNatives()",-1),Vs=n("h3",{id:"注意事项-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注意事项-2","aria-hidden":"true"},"#"),s(" 注意事项")],-1),Ms=n("blockquote",null,[n("p",null,"一些细节问题（重要）")],-1),zs=n("strong",null,"在类加载时期自动调用的静态成员方法",-1),As=n("blockquote",null,[n("p",null,"包括this关键字，和后面学习的super关键字，都不能使用。"),n("p",null,"这意味虽然构造代码块可以给静态成员变量赋值，但静态代码块不能给成员变量赋值。"),n("p",null,[n("strong",null,"说白了，还是要搞清楚，谁先谁后执行的问题！")])],-1),Ls=n("li",null,[n("p",null,"当需要使用复杂的代码给静态成员变量赋值时，可以使用静态代码块。"),n("blockquote",null,[n("p",null,"但如果仅仅是简单的赋值，直接显式赋值即可。"),n("p",null,"总得来说，静态代码块用得不多。")])],-1),Ns=n("li",null,[n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"静态代码块也经常被用来测试类加载的顺序（重要）")])]),n("blockquote",null,[n("p",null,"一个类的静态代码块如果没有被执行，说明它没有被完全类加载。")])],-1),Es=n("h2",{id:"补充类加载过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#补充类加载过程","aria-hidden":"true"},"#"),s(" 补充类加载过程")],-1),Zs=n("p",null,[s("首先，一个类从被加载到JVM内存中开始，到卸载出内存为止，"),n("strong",null,"一个类的生命周期"),s("包括：")],-1),Is=n("img",{src:"https://hixiaodong123.oss-cn-hangzhou.aliyuncs.com/typora/202203201905318.png?align=center",alt:"类生命周期",style:{zoom:"28%"}},null,-1),Rs=n("p",null,"一共是：",-1),Bs=l("<li><p><strong>加载</strong>（Loading）- 加载Class</p></li><li></li><li><p><strong>验证</strong>（Verification）cafe baba 0000 0034 0020 0a00</p></li><li><p><strong>准备</strong>(Preparation)</p></li><li><p><strong>解析</strong>(Resolution)</p></li><li><p><strong>初始化</strong>(Initialization)</p></li><li><p><strong>使用</strong>(Using)</p></li>",7),Os=n("p",null,[n("strong",null,"卸载"),s("(Unloading)")],-1),Ks=n("strong",null,"连接(Linking)",-1),Qs=n("p",null,"一个类在JVM中的生命周期，共有七个阶段。",-1),Ws=n("p",null,[s("其中"),n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,'"加载 --> 连接 ---> 初始化"')]),s("这三个步骤，即一个类的类加载过程。")],-1),Gs=n("p",null,"这三步主要做：",-1),Us=n("strong",null,"连接",-1),Fs=l("<ol><li><p>验证，主要目的是为了确保class文件的字节流中包含的信息符合当前JVM的要求，不会影响JVM的安全。</p><ol><li>cafe baba 0000 0034(52jdk版本) 0020 0a00</li></ol></li><li><p>准备，主要目的是进行静态成员变量的默认初始化，设置初始值。</p><blockquote><p>这样，就保证了静态成员变量的默认初始化，永远最先进行。</p></blockquote></li><li><p>解析，主要目的是将符号引用替换为直接引用。（不理解算了，目前不需要详细了解）</p><ol><li>符号引用： 用一组 符号来描述 被引用的目标</li><li>直接引用： 内存地址</li><li>将 符号替换成 内存地址</li></ol></li></ol>",1),Hs=n("blockquote",null,[n("p",null,"执行静态成员变量的显式赋值。"),n("p",null,"执行静态代码块。")],-1),Xs=n("p",null,"以上，关于类加载各步骤，大致的作用，我们就了解了。",-1),Ys=n("strong",null,"类加载的时机",-1),$s=n("strong",null,"类初始化的时机",-1),na=n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"当然，想要初始化一个类，必然要先进行加载和连接。")],-1),sa=l(`<h2 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1" aria-hidden="true">#</a> 练习</h2><p>类加载过程练习一</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class Demo {
static {
  System.out.println(&quot;Demo类开始初始化步骤了!&quot;);
}

static Cat cat = new Cat();
Dog dog = new Dog();

public static void main(String[] args) {
  System.out.println(&quot;hello world!&quot;);
  Demo d = new Demo();
}

public Demo() {
  System.out.println(&quot;demo&quot;);
}
}

class Cat {
static {
  System.out.println(&quot;Cat类开始初始化步骤了!&quot;);
}

static Dog dog = new Dog();

public Cat() {
  System.out.println(&quot;cat&quot;);
}
}

class Dog {
static {
  System.out.println(&quot;Dog类开始初始化步骤了!&quot;);
}

static Demo demo = new Demo();

public Dog() {
  System.out.println(&quot;dog&quot;);
}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类加载练习二</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStaticDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">TestStaticDemo</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestStaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TestStaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无参构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a=&quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot;,b=&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态成员方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">777</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">TestStaticDemo</span> ts2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestStaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码块综合练习</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class ExerciseBlock {
    static {
        System.out.println(&quot;main方法静态代码块！&quot;);
    }
    {
        System.out.println(&quot;main方法构造代码块！&quot;);
    }
    public static void main(String[] args) {
        System.out.println(&quot;main方法开始执行！&quot;);
        Star s = new Star(18,&quot;马化腾&quot;);
        System.out.println(Star.name);
        System.out.println(s.age);
    }
}
class Star{
    {
        age = 18;
        Star.name = &quot;杨超越&quot;;
        System.out.println(&quot;我喜欢杨超越&quot;);
    }
    static String name = &quot;王菲&quot;;
    int age = 28;
    static {
        name = &quot;杨幂&quot;;
        System.out.println(&quot;我喜欢杨幂&quot;);
    }
    public Star(int age,String name) {
        this(age);
        System.out.println(&quot;age,name：构造器！&quot;);
        Star.name = name;
        Star.name = &quot;刘亦菲&quot;;
    }
    public Star(int age) {
        System.out.println(&quot;age：构造器！&quot;);
        this.age = age;
    }
    public Star() {
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述程序，不难得出，代码块执行的顺序：</p><ol><li>静态代码块</li><li>构造代码块</li><li>构造器</li></ol><h1 id="导包" tabindex="-1"><a class="header-anchor" href="#导包" aria-hidden="true">#</a> 导包</h1><p>学习目标:</p><ul><li>会使用import</li><li>知道什么是全类名</li></ul><h2 id="package关键字" tabindex="-1"><a class="header-anchor" href="#package关键字" aria-hidden="true">#</a> package关键字</h2><p>package这个关键字我们并不陌生，它写在Java源文件的第一行，<strong>用于声明整个Java文件下的所有类的所属包。</strong></p><p>语法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token operator">+</span> 包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，一个Java源文件当中，只能有一个public修饰的类。其余<strong>非public修饰的类和public类都属于同包的关系。</strong></p><p><strong>注意：</strong></p><p>package关键字的使用很简单，但是有几个需要注意的地方：：</p><ol><li>包名在书写时，如果存在多级包名，需要使用用.隔开</li><li>package声明必须处在一个Java文件<strong>有效代码</strong>的第一行，否则会报错 <ol><li>注释不算有效代码，将package声明放在注释下面也是可以的</li><li>建议将package声明永远放在Java源文件真正意义上的第一行</li></ol></li><li>多数情况下，我们使用idea新建Java文件是无需关心package声明的，因为idea会自动生成 <ol><li>但是当你从网上或者其它途径弄到的一些代码，可能会出现包名错乱的情况</li><li>这时建议直接删除package声明，然后&quot;Alt + 回车&quot;类名报错的地方即可</li></ol></li></ol><h2 id="全限定类名" tabindex="-1"><a class="header-anchor" href="#全限定类名" aria-hidden="true">#</a> 全限定类名</h2><blockquote><p>什么是全限定类名？</p></blockquote>`,22),aa=n("li",null,[s("可以"),n("strong",null,"唯一的、准确的定位到一个类"),s("的，由包名加上类名组成的字符串，就是全限定类名。")],-1),ta=l(`<h2 id="import关键字" tabindex="-1"><a class="header-anchor" href="#import关键字" aria-hidden="true">#</a> import关键字</h2><h3 id="引例-4" tabindex="-1"><a class="header-anchor" href="#引例-4" aria-hidden="true">#</a> 引例</h3><p>请按照以下步骤创建需要的类：</p><ol><li>在包名为<strong>one</strong>的包中创建一个<strong>public class Student</strong>和测试类<strong>public class Demo</strong></li><li>在包名为<strong>another</strong>的包中创建一个<strong>public class Student</strong>和<strong>public class Teacher</strong></li><li>在同名的Student类中给出同名的方法test，并给出不同的实现</li><li>创建完毕后，开始进行测试工作</li></ol><p>请完成下面测试：</p><blockquote><p>1.在Demo类中直接创建Student对象，然后调用test方法，请问输出的结果是什么？<br> 2.如果想要test方法调用得出anotherpackage包中Student类的结果，需要怎么做？</p></blockquote><p>显然：</p><p>在Test类中直接创建Student类对象时，test方法的调用结果是onepackage下Student类的方法执行结果。</p><p>而如果想要test方法的调用结果体现为anotherpackage包下的Student类，就需要使用import关键字进行导包操作。</p><h3 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h3><p>从上述案例中，我们可以总结一下编译器在查找并决定使用某个class时，它的搜索机制：</p><ul><li><p>在同包下时，类名是绝对唯一的，有就有，没有就没有，不存在选择的问题。</p><ol><li>这时，编译器是可以直接通过一个类名去查找到一个类的，不需要额外操作，不需要导包。</li><li>这可以看成一种&quot;就近原则&quot;，同包已经存在这个类了，自然不需要去外面找。</li></ol></li><li><p>当同包下没有这个类，必须在不同包下寻找时，多个不同包中完全可能存在同名类。</p><ol><li>这时，编译器肯定是不可能直接通过类名去查找一个类了，需要程序员手动导包。</li><li>手动导包的目的是明确告诉编译器应该使用哪个包下的类。</li></ol></li></ul><p><strong>使用import关键字手动导包的语法是：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> 全限定类名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意事项：</p>`,15),ea=n("p",null,[s("import导包语句应该放在"),n("strong",null,"package声明之后，有效代码之前。")],-1),la=n("p",null,"正常情况下，我们使用某个类时，IDEA会自动导包，不用太关心这条语句的位置。",-1),pa=n("p",null,"像String、System、Math等常用类很明显不是同包下的类，但我们并没有进行导包操作。",-1),oa=n("strong",null,'"java.lang包"',-1),ia=n("li",null,[n("strong",null,'注意"java.lang包"下的所有类，是隐式的导入了每个Java类，而不是没有导入！')],-1),ca=l('<li><p>实际上完全可以不导包去使用不同包下类，这时要明确指出这个类的所属包，也就是要使用全限定类名。</p><blockquote><p>但是一般情况下，全限定类名都很长，导包仍然是更好的手段。</p></blockquote></li><li><p>但是导包总不是都好用，在极少的情况下：</p><blockquote><p>比如，在Demo类中，想要同时访问两个包onepackage、anotherpackage下的两个Student类。</p><p>咋办？</p></blockquote><p>很简单，其中一个Student类使用全限定类名，另一个导包或者就近原则直接使用就可以了。</p><p><span style="color:red;background:yellow;"><strong>（当然条件允许的情况下，干脆把其中一个Studnet改名会更好。）</strong></span></p></li>',2),ua=n("h3",{id:"智能导入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#智能导入","aria-hidden":"true"},"#"),s(" 智能导入")],-1),da=n("strong",null,"导入需要的某个",-1),ra=l(`<p>它的语法是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token operator">+</span> 包名<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),ka=n("strong",null,'"*"',-1),va=n("strong",null,"根据需要",-1),ma=n("strong",null,"其使用的重点在于理解：何为需要！",-1),ba=l('<p>所谓根据需求，即是：<strong>不导入对应包下的类就会报错，不导入不行。反之如果同包下有同名类则不会导入！</strong></p><p>例如：<span style="color:red;background:yellow;"><strong>同包中已存在Student类，再想通过智能导包导入别的包下的Student类是无法完成的。</strong></span></p><h1 id="访问权限修饰符" tabindex="-1"><a class="header-anchor" href="#访问权限修饰符" aria-hidden="true">#</a> 访问权限修饰符</h1><h2 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h2><p>程序的开发，不可能是一个人完成的，而是需要分工协作的。那么怎么保证**&quot;我想要被别人访问的地方，允许访问。不想让别人访问的地方，禁止访问&quot;**这种合情合理的需求呢？</p><p><strong>访问权限控制符：</strong></p><p>在Java语言中，一切事物（类和类的所有成员）都具有(或显示定义或隐式定义的)访问权限，而这种语言层面的访问权限控制，是由访问权限修饰符实现的。</p><h2 id="访问级别" tabindex="-1"><a class="header-anchor" href="#访问级别" aria-hidden="true">#</a> 访问级别</h2><p>Java的访问权限的级别，是依赖包（package）来实现的。</p><p>Java的访问权限级别共分为以下四个级别，访问权限从严格到宽松顺序为：</p><ol><li>private: 只能够在同一类中能够访问，私有的，外面谁都不能用。</li><li>缺省(默认): 同一包中的子类或者其它类能够访问，同包中都可以使用。</li><li>protected: 不同包的子类能够访问。(这个访问级别继承再学习)</li><li>public: 不同包的其他类能够访问。</li></ol>',11),ha=n("thead",null,[n("tr",null,[n("th"),n("th",{style:{"text-align":"center"}},"public"),n("th",{style:{"text-align":"center"}},"protected"),n("th",{style:{"text-align":"center"}},"（缺省）"),n("th",{style:{"text-align":"center"}},"private")])],-1),ga=n("td",null,"同一类中",-1),_a={style:{"text-align":"center"}},ya=n("strong",null,"✔",-1),wa={style:{"text-align":"center"}},qa=n("strong",null,"✔",-1),fa={style:{"text-align":"center"}},Sa=n("strong",null,"✔",-1),xa={style:{"text-align":"center"}},ja=n("strong",null,"✔",-1),Ja=n("td",null,"同一包其他类",-1),Da={style:{"text-align":"center"}},Ca=n("strong",null,"✔",-1),Pa={style:{"text-align":"center"}},Ta=n("strong",null,"✔",-1),Va={style:{"text-align":"center"}},Ma=n("strong",null,"✔",-1),za=n("td",{style:{"text-align":"center"}},null,-1),Aa=n("td",null,"不同包子类",-1),La={style:{"text-align":"center"}},Na=n("strong",null,"✔",-1),Ea={style:{"text-align":"center"}},Za=n("strong",null,"✔",-1),Ia=n("td",{style:{"text-align":"center"}},null,-1),Ra=n("td",{style:{"text-align":"center"}},null,-1),Ba=n("td",null,"不同包其他类",-1),Oa={style:{"text-align":"center"}},Ka=n("strong",null,"✔",-1),Qa=n("td",{style:{"text-align":"center"}},null,-1),Wa=n("td",{style:{"text-align":"center"}},null,-1),Ga=n("td",{style:{"text-align":"center"}},null,-1),Ua=l('<h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><h3 id="类的访问权限修饰符" tabindex="-1"><a class="header-anchor" href="#类的访问权限修饰符" aria-hidden="true">#</a> 类的访问权限修饰符</h3><p>对于类的访问权限控制，非常简单，只有两种：</p><ol><li>public：对其他任意类都可见。</li><li>（缺省的）不写任何关键字，表示对同包中的其它类可见。</li></ol><p>思考：为什么class没有私有或者protected之类的权限？</p><blockquote><p>这是因为，单独定义的class是一个独立的概念，它没有对谁私有，受谁保护的概念。</p><p>所以一般的class的访问权限修饰符只有两种，但是类是可以嵌套定义的。</p><p>内部类就有了私有之类的概念，就有了更多的访问权限修饰符。（这个后面会详细学习，先了解一下）</p></blockquote><h3 id="类中结构的访问权限修饰符" tabindex="-1"><a class="header-anchor" href="#类中结构的访问权限修饰符" aria-hidden="true">#</a> 类中结构的访问权限修饰符</h3>',7),Fa=n("strong",null,"类中成员和构造器",-1),Ha=n("ol",null,[n("li",null,"public：任意类均能访问，实际就是没有限制访问权限。"),n("li",null,"protected：同包中的其他类都可以访问，不同包下必须是子类才能够访问。"),n("li",null,"（缺省的）什么关键字都不写，表示同包中的其他类都可以访问。"),n("li",null,"private：仅对自身类中的其他成员可见。")],-1),Xa=n("p",null,"注意事项（小细节）：",-1),Ya=n("li",null,[n("p",null,"protected权限，涉及继承的概念，我们留到继承的章节中学习，这里直接跳过不学习！")],-1),$a=n("p",null,"按照以往的经验，有些同学对私有private的权限有疑问，这里还是要强调一下：",-1),nt=l(`<p>比如参考下列代码：</p><p>private小细节</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 类Student的类体中</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 类Student的类体中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法传入了一个Student对象，虽然这里是外部调用方法传入的对象，但仍然是Student类的对象。</p><p><strong>处在Student类中，访问Student类的私有成员，不管这个Student类对象哪里来的，都是完全没问题的！</strong></p>`,5),st=n("li",null,[n("p",null,"局部变量，已经被作用域限制死了作用范围，访问权限对它而言毫无意义。"),n("blockquote",null,[n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"局部变量不能使用访问权限修饰符修饰！")])])])],-1),at=n("h2",{id:"作用-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作用-3","aria-hidden":"true"},"#"),s(" 作用")],-1),tt=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"告诉代码的使用者，哪些地方不要触碰，哪些地方应该使用。起到警告、约束和指导代码使用者的功能。")])],-1),et=n("p",null,"举例来说：",-1),lt=n("p",null,"专门提供给外界使用的，推荐使用的，用public。告诉别人：这里是你需要关注、了解和使用的地方。",-1),pt=n("p",null,"不应该触碰的地方，用私有private修饰，告诉别人：这里你不需要你看，也不需要你管。",-1),ot=n("p",null,"具体的案例是：",-1),it=n("strong",null,'"类名."',-1),ct=n("p",null,[n("strong",null,"既然不需要对象，那就干脆不要创建对象，直接把这个功能去掉！")],-1),ut=n("strong",null,'"中间的过程"',-1),dt=n("p",null,"这些方法不需要提供给外界使用，仅作为内部实现功能使用。",-1),rt=n("strong",null,"代码的开发者",-1),kt=n("strong",null,"代码的使用者",-1),vt=n("strong",null,"类中结构的访问权限修饰符",-1),mt=l('<ol><li><span style="color:red;background:yellow;"><strong>尽量私有化</strong></span>，方便自己修改代码，隐藏实现细节。</li><li>如果不能私有化，那也应该<span style="color:red;background:yellow;"><strong>尽量少的给予访问权限</strong></span>，先从默认权限开始考虑。</li><li>只有确定这个结构，一定需要在外部（尤其是不同包下）被访问时，才考虑给public，<span style="color:red;background:yellow;"><strong>尽量少给public</strong></span>。</li></ol><p><span style="color:red;background:yellow;"><strong>权限这个东西，要吝啬，不要&quot;大方&quot;！</strong></span></p><p>0</p>',3);function bt(ht,gt){const a=o("font");return i(),c("div",null,[b,n("p",null,[s("Java 是面向对象的编程语言，独立的个体就是"),t(a,{color:"red"},{default:e(()=>[h]),_:1}),s("，对象就是面向对象程序设计的核心。")]),g,n("p",null,[s("现实中存在的个体，Ta们具有特定的属性和特定的行为，程序世界中的"),t(a,{color:"red"},{default:e(()=>[_]),_:1}),s("也类似，具有以下特点：")]),y,n("p",null,[s("就像上帝造人，女娲造人是以自身为模板一样。我们程序员创建程序中的对象，也需要一个"),t(a,{color:"red"},{default:e(()=>[w]),_:1}),s("。")]),n("p",null,[s('在Java中把创建对象的"模板"，称之为'),t(a,{color:"red"},{default:e(()=>[q]),_:1}),s("。")]),f,S,x,n("p",null,[s("类就抽取了同类别的所有对象"),j,s("上的"),t(a,{color:"red"},{default:e(()=>[J]),_:1}),s("，一个类可以描述千千万万个对象。")]),D,n("p",null,[s("定义"),t(a,{color:"red"},{default:e(()=>[C]),_:1}),s("。")]),P,n("ol",null,[T,n("li",null,[s("访问权限修饰符我们还未学习，这里先默认是"),t(a,{color:"red"},{default:e(()=>[V]),_:1}),s("！")]),M]),z,n("p",null,[s("但是"),t(a,{color:"red"},{default:e(()=>[A]),_:1}),s("，并不是内置数据类型，而是我们自定义的数据类型。")]),L,n("p",null,[s("显然是不可能的，某个类在一开始并不被JVM"),t(a,{color:"red"},{default:e(()=>[N]),_:1}),s("——它不知道类中有什么，必然不可能做任何操作。")]),n("p",null,[s("所以在对某个类做任何操作之前，都需要让JVM来"),t(a,{color:"red"},{default:e(()=>[E]),_:1}),s("这个类型。")]),n("p",null,[s("在Java中，把JVM"),t(a,{color:"red"},{default:e(()=>[Z]),_:1}),s("一个类的过程，称之为"),I]),R,n("ol",null,[B,n("li",null,[O,n("blockquote",null,[t(a,{color:"red"},{default:e(()=>[s("**注意，加static的方法不是成员方法，成员变量不能在其中使用（原因后面再讲）**")]),_:1})])])]),K,n("p",null,[s("可以认为默认初始化是JVM在创建对象的内存结构时，它"),t(a,{color:"red"},{default:e(()=>[Q]),_:1}),s("给出的！")]),W,n("blockquote",null,[t(a,{color:"red"},{default:e(()=>[s("**当方法中存在同名的局部变量和成员变量时，访问该同名变量，访问到的必然是距离访问语句更近的局部变量，而不是同名的成员变量。**")]),_:1})]),G,t(a,{color:"red"},{default:e(()=>[s("**成员方法study()和sleep()的this指向当前对象，指向的就是stu对象。**")]),_:1}),U,t(a,{color:"red"},{default:e(()=>[s("**可以发现和在main方法中打印对象名（引用）结果一致，证明当前对象就是调用方法的那个对象。**")]),_:1}),F,n("ol",null,[n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**默认初始化，具有默认值。**")]),_:1})]),n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**显式赋值，直接将值写在成员变量声明的后面。**")]),_:1})]),n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**构造器赋值。**")]),_:1})])]),H,n("ul",null,[X,Y,n("li",null,[s("访问和使用静态成员变量不推荐使用"),t(a,{color:"red"},{default:e(()=>[$]),_:1}),s("，而应该使用"),t(a,{color:"red"},{default:e(()=>[nn]),_:1}),s("！")]),sn]),an,t(a,{color:"red"},{default:e(()=>[s("**随着类加载完毕，静态成员就存在，并且能够使用了！**")]),_:1}),tn,en,ln,n("ul",null,[n("li",null,[t(a,{color:"red"},{default:e(()=>[s('**只存在静态成员变量，不存在"静态局部变量"**')]),_:1})])]),pn,n("ul",null,[on,n("li",null,[cn,n("ol",null,[n("li",null,[s("静态方法的最主要特点就是"),t(a,{color:"red"},{default:e(()=>[un]),_:1})])]),dn,rn,kn])]),vn,n("p",null,[s("或者，说的更清楚一点，就是："),t(a,{color:"red"},{default:e(()=>[mn]),_:1})]),bn,n("p",null,[s('该对象没有栈上的引用指向，没有所谓的**"对象名"**，是一个'),t(a,{color:"red"},{default:e(()=>[hn]),_:1}),s("。")]),gn,_n,n("ol",null,[n("li",null,[yn,n("blockquote",null,[wn,t(a,{color:"red"},{default:e(()=>[s("**注：子类对象的概念后面继承中会学习，这里为了文档严谨性写出来，你可以先忽略！**")]),_:1})]),qn]),n("li",null,[fn,n("blockquote",null,[Sn,t(a,{color:"red"},{default:e(()=>[s("**注：子类对象的概念后面继承中会学习，这里为了文档严谨性写出来，你可以先忽略！**")]),_:1})]),xn])]),jn,Jn,n("ol",null,[n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**使用匿名对象，代码简洁（相当于少写了一些代码）这是匿名对象最主要的优点。**")]),_:1})]),n("li",null,[Dn,n("blockquote",null,[n("p",null,[s("但是"),t(a,{color:"red"},{default:e(()=>[Cn]),_:1}),s('，并不是一个对象更早成为"垃圾"就会更好回收，这个优点仅是理论上的。')])])])]),Pn,n("p",null,[s("匿名对象由于没有引用指向，所以它是"),t(a,{color:"red"},{default:e(()=>[Tn]),_:1}),s("，用完后就无法再次使用了。")]),Vn,t(a,{color:"red"},{default:e(()=>[s("**构造代码块内部属于局部位置，在里面定义变量，就是一个仅在构造代码块中生效的局部变量。**")]),_:1}),Mn,zn,An,Ln,n("p",null,[s("学习对象中成员变量的赋值，和赋值顺序要遵循"),t(a,{color:"red"},{default:e(()=>[Nn]),_:1}),s("的原则：")]),n("ol",null,[n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**头**")]),_:1}),s("：默认初始化，具有默认值，在对象结构存在于对象中，对象中的成员变量就已经具有了默认值。"),En]),n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**尾**")]),_:1}),s("：构造器，构造器在整个对象的成员变量赋值过程中，处在最后的阶段，最后被执行。")])]),n("p",null,[s("明确以上两点后，我们现在只需要研究"),t(a,{color:"red"},{default:e(()=>[Zn]),_:1}),s("和"),t(a,{color:"red"},{default:e(()=>[In]),_:1}),s("的赋值顺序，")]),Rn,t(a,{color:"red"},{default:e(()=>[s("**显式赋值和构造代码块的执行顺序，并不是固定的，而是按照代码的书写顺序去执行的：**")]),_:1}),Bn,t(a,{color:"red"},{default:e(()=>[s("**那么构造代码块为什么能够有这种特点呢？它的原理是什么呢？**")]),_:1}),On,n("p",null,[s("通过查看"),t(a,{color:"red"},{default:e(()=>[Kn]),_:1}),s("，我们发现编译后的代码中并不存在"),t(a,{color:"red"},{default:e(()=>[Qn]),_:1}),s("的结构，而是：")]),Wn,Gn,Un,n("ol",null,[Fn,Hn,n("li",null,[s("构造代码块中的代码要放入构造器的首几行，"),t(a,{color:"red"},{default:e(()=>[Xn]),_:1})])]),Yn,$n,ns,n("ol",null,[ss,n("li",null,[as,ts,es,n("blockquote",null,[ls,ps,t(a,{color:"red"},{default:e(()=>[s("**注：整个过程中，构造代码块和显式赋值的代码只会执行一次，不会执行多次！！**")]),_:1})]),os,n("blockquote",null,[is,cs,t(a,{color:"red"},{default:e(()=>[s("**注：整个过程中，构造代码块和显式赋值的代码只会执行一次，不会执行多次！！**")]),_:1})])]),n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**以上总结，没有引入继承的概念，并不全面，我们会在继承中补全它。**")]),_:1})])]),us,ds,n("ol",null,[n("li",null,[n("p",null,[s("我们可以"),t(a,{color:"red"},{default:e(()=>[rs]),_:1}),s("一样的，把所有构造器都需要执行的代码，放入构造代码块中。")])]),ks]),vs,t(a,{color:"red"},{default:e(()=>[s("**静态代码块内部属于局部位置，在里面定义变量，就是一个仅在静态代码块中生效的局部变量。**")]),_:1}),ms,bs,hs,n("blockquote",null,[n("p",null,[s("这里还是想再强调一下："),t(a,{color:"red"},{default:e(()=>[gs]),_:1})]),_s]),ys,ws,n("p",null,[s("在这三个赋值方式中，默认初始化是永远第一步进行的，"),t(a,{color:"red"},{default:e(()=>[qs]),_:1}),s("和"),t(a,{color:"red"},{default:e(()=>[fs]),_:1}),s("的执行顺序：")]),Ss,xs,js,n("ol",null,[n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**复杂的静态成员变量的赋值。**")]),_:1}),Js]),n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**如果有一段代码，在类的全局，从始至终，只运行一次，可以写到静态代码块中。**")]),_:1}),s("（依赖于类加载只有一次的原理）"),n("blockquote",null,[Ds,Cs,Ps,n("p",null,[s("System类的初始化，依赖于本地方法"),t(a,{color:"red"},{default:e(()=>[Ts]),_:1}),s("的执行。")])])])]),Vs,Ms,n("ol",null,[n("li",null,[n("p",null,[s("静态代码块可以近似看成一个，"),t(a,{color:"red"},{default:e(()=>[zs]),_:1}),s("，所以不能在里面调用非静态。（没有对象）")]),As]),Ls,Ns]),Es,Zs,Is,Rs,n("ol",null,[Bs,n("li",null,[Os,n("p",null,[s("注：其中，验证、准备和解析可以统称为"),t(a,{color:"red"},{default:e(()=>[Ks]),_:1}),s("。")])])]),Qs,Ws,Gs,n("ol",null,[n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**加载**")]),_:1}),s("主要是做将class字节码文件读取进JVM内存的操作。")]),n("li",null,[n("p",null,[s("在"),t(a,{color:"red"},{default:e(()=>[Us]),_:1}),s("过程中：")]),Fs]),n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**初始化**")]),_:1}),s("是类加载的最后一个步骤。主要目的是执行和static相关的内容，包括："),Hs])]),Xs,n("p",null,[s("所以这里要重新认识一个概念："),t(a,{color:"red"},{default:e(()=>[Ys]),_:1})]),n("p",null,[s("类加载的时机，说得更准确一点，应该是"),t(a,{color:"red"},{default:e(()=>[$s]),_:1}),s("。"),na]),sa,n("ol",null,[aa,n("li",null,[t(a,{color:"red"},{default:e(()=>[s("**默认情况下**")]),_:1}),s("，直接输出一个对象的引用，会打印该类的全限定类名")])]),ta,n("ol",null,[n("li",null,[ea,n("blockquote",null,[la,t(a,{color:"red"},{default:e(()=>[s("**一般只需要注意不要用IDEA导错包就可以了。**")]),_:1})])]),n("li",null,[pa,n("ol",null,[n("li",null,[s("这是因为在Java当中的，"),t(a,{color:"red"},{default:e(()=>[oa]),_:1}),s("是Java的核心类包，具有隐式的导包。")]),ia])]),ca]),ua,n("blockquote",null,[n("p",null,[s("import关键字存在智能导包的形式，会智能的**"),t(a,{color:"red"},{default:e(()=>[s("根据需要")]),_:1}),da,s("类**")])]),ra,n("p",null,[s("其中"),t(a,{color:"red"},{default:e(()=>[ka]),_:1}),s("具有通配的含义，表示该包的类都会"),t(a,{color:"red"},{default:e(()=>[va]),_:1}),s("导入。")]),n("p",null,[s("智能导包是一种十分高效且方便的导包方式，"),t(a,{color:"red"},{default:e(()=>[ma]),_:1})]),ba,n("table",null,[ha,n("tbody",null,[n("tr",null,[ga,n("td",_a,[t(a,{color:"red"},{default:e(()=>[ya]),_:1})]),n("td",wa,[t(a,{color:"red"},{default:e(()=>[qa]),_:1})]),n("td",fa,[t(a,{color:"red"},{default:e(()=>[Sa]),_:1})]),n("td",xa,[t(a,{color:"red"},{default:e(()=>[ja]),_:1})])]),n("tr",null,[Ja,n("td",Da,[t(a,{color:"red"},{default:e(()=>[Ca]),_:1})]),n("td",Pa,[t(a,{color:"red"},{default:e(()=>[Ta]),_:1})]),n("td",Va,[t(a,{color:"red"},{default:e(()=>[Ma]),_:1})]),za]),n("tr",null,[Aa,n("td",La,[t(a,{color:"red"},{default:e(()=>[Na]),_:1})]),n("td",Ea,[t(a,{color:"red"},{default:e(()=>[Za]),_:1})]),Ia,Ra]),n("tr",null,[Ba,n("td",Oa,[t(a,{color:"red"},{default:e(()=>[Ka]),_:1})]),Qa,Wa,Ga])])]),Ua,n("p",null,[s("对于"),t(a,{color:"red"},{default:e(()=>[Fa]),_:1}),s("的访问权限，访问权限修饰符总位于它们定义的开头位置，可以使用的修饰符有4种：")]),Ha,Xa,n("ol",null,[Ya,n("li",null,[$a,n("blockquote",null,[t(a,{color:"red"},{default:e(()=>[s("**私有意味着在类的外部是无法直接访问的，但是在类的内部，只要还是这个类，都是可以随意访问的。**")]),_:1})]),nt]),st]),at,tt,et,n("ol",null,[n("li",null,[lt,n("blockquote",null,[t(a,{color:"red"},{default:e(()=>[s("**所有明确提供给外界使用，实现功能的方法，需要用public修饰。**")]),_:1})])]),n("li",null,[pt,ot,n("ol",null,[n("li",null,[n("p",null,[s("工具类，既然所有的方法，都可以直接用"),t(a,{color:"red"},{default:e(()=>[it]),_:1}),s("去调用，不需要创建对象！")]),n("blockquote",null,[ct,t(a,{color:"red"},{default:e(()=>[s("**所有工具类，都应该私有化无参构造方法！！**")]),_:1})])]),n("li",null,[n("p",null,[s("类中需要提供给外界使用的方法的实现过程中，经常需要一些"),t(a,{color:"red"},{default:e(()=>[ut]),_:1}),s("方法。")]),n("blockquote",null,[dt,t(a,{color:"red"},{default:e(()=>[s('**所有类中的"中间方法"都应该私有化它们！**')]),_:1})])])])])]),n("p",null,[s("好处是显而易见的：把"),t(a,{color:"red"},{default:e(()=>[rt]),_:1}),s("和"),t(a,{color:"red"},{default:e(()=>[kt]),_:1}),s("给区分开来了：")]),n("p",null,[s("所以，我们就可以总结出，我们在实际开发中，使用"),t(a,{color:"red"},{default:e(()=>[vt]),_:1}),s("的原则：")]),mt])}const wt=p(m,[["render",bt],["__file","4_面向对象基础.html.vue"]]);export{wt as default};
