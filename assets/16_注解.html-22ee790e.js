import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-58d2c58f.js";const p="/assets/image-20230817175904439-b56d51f6.png",e="/assets/image-20230817180042910-ec76b0f2.png",o={},c=t(`<p>学习目标:</p><ul><li><p>掌握注解的定义与使用</p></li><li><p>熟悉2个元注解的作用</p></li><li><p>掌握使用注解处理器获取注解信息</p></li></ul><h1 id="注解与注释" tabindex="-1"><a class="header-anchor" href="#注解与注释" aria-hidden="true">#</a> 注解与注释</h1><p><strong>注释</strong></p><ul><li>单行注释//</li><li>多行注释/* */</li><li>文档注释/** */</li></ul><p>注释的作用:</p><p>传递额外的信息进行解释说明, 给程序员看的</p><p>注释不参与编译</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>注释只有语法形式<span class="token punctuation">,</span> 具体内容没有要求
<span class="token comment">// 年龄在18-25之间, [18,25], 18&lt;=age&lt;=25</span>
<span class="token keyword">boolean</span> <span class="token function">judegeAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>什么是注解</strong></p><p>Annotation其实是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理</p><p><strong>注解的作用</strong></p><p>通过使用Annotation，程序开发人员可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息</p><p>Annotation就像修饰符一样被使用，可用于修类、构造器、方法、成员变量、参数...，这些信息被存储在Annotation的“属性名=属性值”对中</p><p><strong>注解 VS 注释</strong></p><ul><li>相同点 <ul><li>都是用来传递额外信息的</li></ul></li><li>不同点 <ul><li>注解可以参与编译,注释不行</li><li>注解有使用范围,注释没有(想咋写咋写)</li><li>注解作为一种数据类型,跟class interface具有同等地位</li></ul></li></ul><h1 id="注解定义" tabindex="-1"><a class="header-anchor" href="#注解定义" aria-hidden="true">#</a> 注解定义</h1><p>语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>权限修饰符 <span class="token annotation punctuation">@interface</span> 注解名字<span class="token punctuation">{</span>
    <span class="token comment">// 注解体定义</span>
    属性类型 属性名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    属性类型 属性名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    属性类型 属性名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
举例<span class="token operator">:</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

属性类型<span class="token operator">:</span>
基本数据类型
<span class="token class-name">String</span>类型
<span class="token class-name">Class</span>类型
注解类型
枚举类型
以及以上类型的数组形式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><p>注解不允许继承</p><p><strong>注解和接口的关系：</strong></p><p>注解和接口的定义都使用同一个关键字interface，而且注解体的定义也非常类似于接口中的抽象方法。</p><p>这当然不是巧合，而是因为注解本身就是一种特殊的接口。查看<strong>java.lang.annotation.Annotation接口</strong>的JDK文档，原文是：</p><blockquote><p>所有注解类型都隐式扩展自该接口。但要注意，手动扩展该公共接口的接口不会定义为注解类型。还要注意此接口本身不是定义注解型。</p></blockquote><p>也就是说：</p><ol><li>当你使用&quot;@interface&quot;关键字定义一个注解类型时，它会<mark>自动实现<strong>java.lang.annotation.Annotation接口</strong></mark>，即使你没有显式地声明这个继承关系。</li><li>如果使用&quot;interface&quot;关键字定义一个接口类型，并显式地让它继承<strong>java.lang.annotation.Annotation接口</strong>，那么这个新接口也不会被视为一个注解类型。</li><li><strong>java.lang.annotation.Annotation接口</strong>本身并不是一个注解类型，它只是一个普通的接口类型。</li><li><strong>注解类型并不能显式地继承其他类或接口，虽然它确实隐式实现了接口java.lang.annotation.Annotation~</strong></li></ol><p>当然，以上概念了解即可。虽然注解和接口确实共享了同一个关键字，但它们在实际使用中具<mark>有不同的目的和功能</mark>，可谓千差万别</p><h1 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h1><p>元注解的概念来源于元数据，什么是元数据呢？</p><figure><img src="`+p+'" alt="image-20230817175904439" tabindex="0" loading="lazy"><figcaption>image-20230817175904439</figcaption></figure><p>图中框起来的一列数据是什么意思呢？表头的学校就负责解释这一列数据，所以这一列数据都代表某个学生的学校信息。</p><p><strong>像“学校”这样的，用于解释数据的数据，就是元数据 meta data</strong></p><p><strong>元注解：<mark>描述修饰注解的注解</mark>（注解的注解）</strong></p><figure><img src="'+e+`" alt="image-20230817180042910" tabindex="0" loading="lazy"><figcaption>image-20230817180042910</figcaption></figure><p>常用元注解：</p><p><strong>@Retention元注解，来定义我们自己定义的<mark>注解的保留级别</mark>.</strong></p><ul><li>RetentionPolicy.RUNTIME</li><li>RetentionPolicy.CLASS 默认</li><li>RetentionPolicy.SOURCE</li></ul><p><strong>@Target元注解，注解可以作用的目标</strong></p><p>对于注解而言，可以作用的目标：</p><ol><li>整个类 ElementType.TYPE</li><li>成员变量 ElementType.FIELD</li><li>构造方法 ElementType.CONSTRUCTOR</li><li>成员方法 ElementType.METHOD</li></ol><h1 id="注解的使用-重点" tabindex="-1"><a class="header-anchor" href="#注解的使用-重点" aria-hidden="true">#</a> 注解的使用(重点)</h1><p>类比类对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候注解需要通过@符号进行实例化, 对每个属性都要赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>@注解名<span class="token punctuation">(</span>属性<span class="token number">1</span><span class="token operator">=</span>属性值<span class="token punctuation">,</span>属性<span class="token number">2</span><span class="token operator">=</span>属性值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释：</p><ol><li>&quot;@&quot;可以认为相当于“new”关键字，必不可少。</li><li>注解相当于给Java代码打上一个标签，所以它必须要修饰Java代码的一个结构。比如修饰一整个类，一整个方法，一个成员变量等等。</li><li>实例化注解时，必须给注解的各个属性赋值，<strong>赋值方式是：属性名 = 属性值</strong>。如果是数组类型的注解属性，用&quot;{}&quot;赋值。如果有多个属性，赋值时用&quot;，&quot;隔开。</li></ol><p>注意事项:</p><ul><li><p>每个属性都要赋值</p></li><li><p>可以不赋值,但是要有默认值, default</p></li><li><p>数组形式赋值 {}</p></li><li><p>如果只有1个属性, 名字叫value, 可以简化赋值</p></li><li><p>如果属性类型是引用类型, 不能是null</p></li></ul><p><strong>示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@MyAnnotation</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">777</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">&quot;777&quot;</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;777&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="注解处理器" tabindex="-1"><a class="header-anchor" href="#注解处理器" aria-hidden="true">#</a> 注解处理器</h1><p><strong>什么是注解处理器?</strong></p><ul><li>获取注解信息, 根据注解信息进行处理</li></ul><p><strong>如何获取注解信息?</strong></p><ul><li>通过反射获取注解信息</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _24annotation<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_04handle<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/10/24 17:41
 **/</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取字节码文件对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;_24annotation.com.cskaoyan._04handle.Demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拿到方法对象</span>
        <span class="token class-name">Method</span> loginMethod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断方法上是否使用了注解</span>
        <span class="token keyword">boolean</span> annotationPresent <span class="token operator">=</span> loginMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Login</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取注解实例</span>
            <span class="token class-name">Login</span> loginAnnotation <span class="token operator">=</span> loginMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Login</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取属性值</span>
            <span class="token class-name">String</span> password <span class="token operator">=</span> loginAnnotation<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> username <span class="token operator">=</span> loginAnnotation<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有使用注解&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Login</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义注解</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">Login</span><span class="token punctuation">{</span>
    <span class="token comment">// 属性</span>
    <span class="token class-name">String</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习:</p><p>定义2个注解</p><p>AgeLimit 属性 maxAge minAge</p><p>NameLimit 属性 length</p><p>定义学生类Student 年龄18-25之间 名字长度不超过5</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _24annotation<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_04handle<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/10/25 9:37
 **/</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> stuCls<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            stuCls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;_24annotation.com.cskaoyan._04handle.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 提供一个方法 来产生学生对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 名字校验</span>
        <span class="token function">judgeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 年龄校验</span>
        <span class="token function">judgeAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取构造方法对象</span>
        <span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span>
                stuCls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// newInstance实例化对象</span>
        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> student<span class="token punctuation">;</span>
        <span class="token comment">// 最终返回学生对象</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">judgeAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取age成员变量</span>
        <span class="token class-name">Field</span> ageField <span class="token operator">=</span> stuCls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否用了注解</span>
        <span class="token keyword">boolean</span> annotationPresent <span class="token operator">=</span> ageField<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">AgeLimit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果用了注解</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取注解实例</span>
            <span class="token class-name">AgeLimit</span> ageLimit <span class="token operator">=</span> ageField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AgeLimit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取属性值</span>
            <span class="token keyword">int</span> maxAge <span class="token operator">=</span> ageLimit<span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> minAge <span class="token operator">=</span> ageLimit<span class="token punctuation">.</span><span class="token function">minAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断是否满足要求</span>
            <span class="token comment">// 如果不满足要求 抛出异常</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> minAge <span class="token operator">||</span> age <span class="token operator">&gt;</span> maxAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;年龄不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">judgeName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取name成员变量</span>
        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> stuCls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否用了注解</span>
        <span class="token keyword">boolean</span> annotationPresent <span class="token operator">=</span> nameField<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">NameLimit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果用了注解</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取注解实例</span>
            <span class="token class-name">NameLimit</span> nameLimit <span class="token operator">=</span> nameField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">NameLimit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取属性值</span>
            <span class="token keyword">int</span> length <span class="token operator">=</span> nameLimit<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断是否满足要求</span>

            <span class="token comment">// 如果不满足要求 抛出异常</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;名字不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="注解vs配置文件" tabindex="-1"><a class="header-anchor" href="#注解vs配置文件" aria-hidden="true">#</a> 注解VS配置文件</h1><p>配置文件<br> 优点：可配置，不用改源码。管理方便<br> 缺点：不直观，开发效率低</p><p>注解<br> 优点：直观开发效率高<br> 缺点：硬编码，修改之后需要重新编译运行<br> 难以和代码分开独立管理</p><h1 id="注解的使用场景" tabindex="-1"><a class="header-anchor" href="#注解的使用场景" aria-hidden="true">#</a> 注解的使用场景</h1><p>SE : @Test @Override @Deprecated@FunctionalInterface</p><p>EE : @WebService</p><p>框架: @AutoWired @Service @Mapping @Data @Parm</p>`,71),l=[c];function i(u,k){return s(),a("div",null,l)}const m=n(o,[["render",i],["__file","16_注解.html.vue"]]);export{m as default};
