import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,b as n,d as s,e,w as p,f as a}from"./app-58d2c58f.js";const k="/assets/image-20230108210909312-80ac854d.png",r="/assets/image-20230106164304853-ceea39af.png",d={},v=a(`<h1 id="java包装类型" tabindex="-1"><a class="header-anchor" href="#java包装类型" aria-hidden="true">#</a> Java包装类型</h1><p>查看下列代码，请回答下列代码的执行结果是什么？</p><p>包装类相关引例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> start <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		count<span class="token operator">++</span><span class="token punctuation">;</span>
	 <span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先查看一个经典报错：</p><blockquote><p>Non-static field &#39;start&#39; cannot be referenced from a static context</p></blockquote><p>意译过来，就是在一个静态（static）的方法中无法访问一个非静态的成员变量。</p><p>我们早就学习过static关键字了，在static修饰的静态成员方法中，是不能直接访问类的成员变量的。</p><p>上述代码，可以在end和start两个变量的声明前,加上static就不会再报错了。</p><p>当然，这个题目更重要的一点在于：</p><p>有符号数的最大值：</p><ol><li>Integer.MAX_VALUE的二进制是0111 1111 1111 1111 1111 1111 1111 1111</li><li>Integer.MIN_VALUE的二进制是 1000 0000 0000 0000 0000 0000 0000 0000</li><li>Integer.MAX_VALUE + 1 = Integer.MIN_VALUE</li></ol><p>所以很明显，上述代码，循环会从int类型最大值循环到int类型最小值，再循环到int类型最大值....<span style="color:red;background:yellow;"><strong>这是一个死循环！</strong></span></p><p>当然，让这个代码不死循环也很简单，只需要修改循环条件即可。</p><p><strong>像上述代码中的类Integer其实就是包装类，下面具体讲解一下包装类型。</strong></p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>什么是包装类？</p><p>大家都知道：Java是面向对象的语言，Java当中万物皆对象。</p><p>但这句话并不严谨，因为Java不是完全面向对象的编程语言。</p><p><strong>因为Java还有基本数据类型变量，它们不是对象。</strong></p><p>所以为了弥补基本数据类型变量非对象的尴尬境地，并且我们确有需求把基本数据类型变量也当成一个对象使用。</p>`,21),m=n("strong",null,"包装类",-1),b=a('<p><strong>所谓包装类，就是把基本数据类型包装成引用数据类型，变成一个个对象, 就可以调用类中的方法</strong></p><p>以下包装类和八种基本数据类型对应关系：</p><p>包装类型对照表</p><table><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:center;">对应包装类</th><th style="text-align:center;">包装类的直接父类</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">java.lang.Byte</td><td style="text-align:center;">Number</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">java.lang.Short</td><td style="text-align:center;">Number</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">java.lang.Integer</td><td style="text-align:center;">Number</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">java.lang.Long</td><td style="text-align:center;">Number</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">java.lang.Float</td><td style="text-align:center;">Number</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">java.lang.Double</td><td style="text-align:center;">Number</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">java.lang.Boolean</td><td style="text-align:center;">Object</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">java.lang.Character</td><td style="text-align:center;">Object</td></tr></tbody></table><p><strong>继承关系</strong></p><figure><img src="'+k+`" alt="image-20230108210909312" tabindex="0" loading="lazy"><figcaption>image-20230108210909312</figcaption></figure><h2 id="包装类型特点" tabindex="-1"><a class="header-anchor" href="#包装类型特点" aria-hidden="true">#</a> 包装类型特点</h2><p><strong>包装类型对象不可变</strong></p><ol><li><p>所有数值包装类型和Boolean类，<strong>都是使用一个对应类型的value成员来存储它的基本数据类型变量的取值的。</strong></p><p>比如Integer之于int类型，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * The value of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Integer</span></span></span><span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@serial</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这个value都是final修饰的，这就意味着是修改不了的。</p></li><li><p><strong>所有包装类型都是final修饰的，不能通过继承破坏value的设计体系。</strong></p></li></ol><p>总之，包装类型中有value成员变量的对象，都是不可变的。</p><h2 id="基本数据类型与包装类型的相互转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型与包装类型的相互转换" aria-hidden="true">#</a> 基本数据类型与包装类型的相互转换</h2><p>​ 包装类型对象在使用上，在绝大多数情况下，是和它对应的基本数据类型是没有区别的。这依赖于Java&quot;<strong>自动拆装箱</strong>&quot;机制。</p><p>拆箱和装箱的概念：</p><ol><li>在Java当中，把基本数据类型变量，转换为其对应包装类的引用数据类型变量，称之为&quot;装箱&quot;。</li><li>在Java当中，把包装类的引用数据类型类型变量，转换为其对应基本数据类型变量，称之为&quot;拆箱&quot;。</li></ol><p><strong>手动装修/拆箱与自动装箱/拆箱</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 手动装箱</span>
<span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 手动拆箱</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自动装箱</span>
<span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">// 自动拆箱</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> integer2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自动装箱与拆箱</strong></p><p>自动装箱和拆箱其实是一种语法糖，在底层自动调用了方法而已：</p>`,18),g=a(`<li><p><strong>自动装箱依赖于，包装类型类名.valueOf(对应基本数据类型值)</strong></p><p>比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在代码中出现上述写法，就会警告：</p><blockquote><p>Unnecessary boxing &#39;Integer.valueOf(123)&#39;</p></blockquote><p>即装箱是自动，无需再手动调用方法。</p></li>`,1),y=n("p",null,[n("strong",null,"自动拆箱依赖于，包装类型对象名.基本数据类型名Value()")],-1),h=n("p",null,"比如：",-1),w=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在代码中出现上述写法，也一样会警告：</p><blockquote><p>// Unnecessary unboxing &#39;i.intValue()&#39;</p></blockquote><p>即拆箱是自动，无需再手动调用方法。</p>`,4),f=a(`<h2 id="包装类型和string类型的相互转换" tabindex="-1"><a class="header-anchor" href="#包装类型和string类型的相互转换" aria-hidden="true">#</a> 包装类型和String类型的相互转换</h2><p><strong>包装类---&gt;String</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// wrapper----&gt; String</span>
<span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
<span class="token comment">// 方式一: 使用toString方法</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s1 = &quot;</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方式二: 字符串拼接</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> integer<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s2 = &quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方式三: 使用String里的api: valueOf(int i)</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s3 = &quot;</span> <span class="token operator">+</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>String---&gt;包装类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// String ---&gt; wrapper</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 方式一: parseInt(int i)</span>
<span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;integer = &quot;</span> <span class="token operator">+</span> integer1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方式二: valueOf(String s)</span>
<span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i1 = &quot;</span> <span class="token operator">+</span> integer2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方式三: 使用Integer的构造方法</span>
<span class="token class-name">Integer</span> integer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;integer2 = &quot;</span> <span class="token operator">+</span> integer3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包装类的常用方法" tabindex="-1"><a class="header-anchor" href="#包装类的常用方法" aria-hidden="true">#</a> 包装类的常用方法</h2><p>把String字符串转换成各种基本数据类型，普遍使用包装类型类名.parseXxx(&quot;字符串数值&quot;)</p><p>其中Xxx是对应基本数据类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>比如：
<span class="token class-name">String</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token keyword">int</span>，使用<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token keyword">double</span>，使用<span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符(Character)相关的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 转换为小写</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
<span class="token comment">// 转换为大写</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
<span class="token comment">// 确定指定字符是否为大写字母</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
<span class="token comment">// 确定指定字符是否为小写字母</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
<span class="token comment">// 否为空格    </span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
<span class="token comment">// 确定指定字符是否为字母或数字</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
<span class="token comment">// 确定指定字符是否为字母</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token comment">// 确定指定字符是否为数字。</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="integer的缓存机制" tabindex="-1"><a class="header-anchor" href="#integer的缓存机制" aria-hidden="true">#</a> Integer的缓存机制</h2><p>经典问题, 回答输出结果, 为什么?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false 对象地址不一样</span>

    <span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 底层使用valueOf(int i)方法</span>
    <span class="token class-name">Integer</span> i4 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 底层使用valueOf(int i)方法</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>

    <span class="token class-name">Integer</span> i5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 底层使用valueOf(int i)方法</span>
    <span class="token class-name">Integer</span> i6 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//底层使用valueOf(int i)方法</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5 <span class="token operator">==</span> i6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因:</p><p>Integer源代码</p><p>Integer中有缓存, low=-128 high=127</p><p>范围-128-127 , 在这个范围内, 返回同一个</p><p>不在范围内, new一个新的对象返回</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="integer的一些面试问题" tabindex="-1"><a class="header-anchor" href="#integer的一些面试问题" aria-hidden="true">#</a> Integer的一些面试问题</h2><p>回答输出结果, true 还是false ? 为什么?</p><p><strong>Q1</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1.0  三目运算符取决于最大范围的double</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Q2</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> 
    obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1 跟上面那个不一样,这是if语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Q3</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>
<span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false 对象地址不一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><p>包装类始终是一个类，它是一个引用数据类型，始终是不同于基本数据类型的，所以要注意以下：</p><ol><li>使用包装类要注意空指针异常，而基本数据类型没有这个烦恼。</li><li><span style="color:red;background:yellow;"><strong>包装类对象在比较对象相等时，不能再像基本数据类型一样用&quot;==&quot;比较了！而是要使用&quot;equals&quot;方法。</strong></span></li></ol><p>在以上注意事项中，尤其注意不能使用&quot;==&quot;比较大小，这里我们做一下原理的讲解。</p><p>包装类型在比较对象相等时，要分三种情况：</p><ol><li>整型包装类型对象之间的比较</li><li>浮点型包装类型对象之间的比较</li><li>Boolean对象之间的比较</li></ol><h3 id="整型包装类型对象相等的比较" tabindex="-1"><a class="header-anchor" href="#整型包装类型对象相等的比较" aria-hidden="true">#</a> 整型包装类型对象相等的比较</h3><p>简单来说，整型的包装类型对象：</p><ol><li><p>当它的取值在一个byte即[-128,127]的取值范围内时，会从缓存（cache）中共享同一个对象。</p><p>这样的话，这个范围的整型包装类型对象，用&quot;==&quot;判断就是true。</p></li><li><p>但是一旦它的取值超出了一个byte的取值范围，那么就会重新创建一个对象。</p><p>这样的话，用&quot;==&quot;判断就是false。</p></li></ol><p>不同的整型包装类型对象，一个byte的取值范围的对象缓存生成时机是不同的：</p><ol><li>Integer对象是在JVM启动时就把对象放入缓存。</li><li>其余整型对象是在具体使用时把对象放入缓存。</li></ol><h3 id="浮点型包装类型对象相等的比较" tabindex="-1"><a class="header-anchor" href="#浮点型包装类型对象相等的比较" aria-hidden="true">#</a> 浮点型包装类型对象相等的比较</h3><p>浮点型包装类型对象是没有缓存存在的，查看浮点型包装类的valueOf方法可以发现：</p><p><strong>Double的valueOf方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以浮点型包装类型如果直接用字面值赋值，一定会创建新对象，不能用&quot;==&quot;比较大小</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Double</span> d3 <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
<span class="token class-name">Double</span> d4 <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3 <span class="token operator">==</span> d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔型对象相等的比较" tabindex="-1"><a class="header-anchor" href="#布尔型对象相等的比较" aria-hidden="true">#</a> 布尔型对象相等的比较</h3><p>查看Boolean包装类的valueOf方法可以发现：</p><p><strong>Boolean的valueOf方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么TRUE和FALSE又是什么呢？</p><p><strong>Boolean的全局常量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * The <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Boolean</span></span></span><span class="token punctuation">}</span> object corresponding to the primitive
 * value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Boolean</span> <span class="token constant">TRUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * The <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Boolean</span></span></span><span class="token punctuation">}</span> object corresponding to the primitive
 * value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Boolean</span> <span class="token constant">FALSE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注:</strong></p><p><strong>建议包装类型对象比较内容还是使用equals方法, 不要使用==</strong></p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>包装类的使用场景还是比较多的，最常见的：</p><ol><li>包装类把基本数据类型变为一个对象，并且存在自动拆装箱，有些时候这本身就是一个用途</li><li>集合当中使用，集合只能存储对象，所以集合中就要用包装类型替代基本数据类型</li><li>获取一些最值之类的常量</li><li>做进制转换，类型转换等操作</li><li>后续做项目, 写接口的时候也建议使用包装类型(需要判断null)</li></ol><h1 id="java枚举类型" tabindex="-1"><a class="header-anchor" href="#java枚举类型" aria-hidden="true">#</a> Java枚举类型</h1><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><p>需求:</p><blockquote><p>定义一个表示星期的类WeekDay, 定义2个属性</p><p>String name: 表示是周几</p><p>int id: 表示编号(1-7)</p><p>创建并打印相应的对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">WeekDay</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WeekDay</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 经过测试, 我们发现不仅能够创建周一到周日的对象, 还能够创建其他的对象, 但是实际上我们的需求只需要7个固定的对象, 其余的不需要, 不满足我们的需求</p><p>这种情况下,我们需要<strong>枚举类型(enumeration)</strong>(一个个的列举) , 一个特殊的类用来存放固定的几个常量对象(周一到周日)</p><h2 id="枚举的两种实现方式" tabindex="-1"><a class="header-anchor" href="#枚举的两种实现方式" aria-hidden="true">#</a> 枚举的两种实现方式</h2><ul><li>自定义类实现枚举</li><li>使用Enum关键字实现枚举</li></ul><h3 id="自定义类实现枚举" tabindex="-1"><a class="header-anchor" href="#自定义类实现枚举" aria-hidden="true">#</a> 自定义类实现枚举</h3><ol><li>构造方法私有, 不允许外部创建对象, 类内部可以创建, 保证数量是固定的</li><li>枚举对象名通常使用大写</li><li>对枚举对象(属性)使用static final修饰, 保证是常量, 能够通过类名去访问(暴露给外部访问的一个入口)</li><li>不需要提供setXXX()方法, 枚举对象通常为只读</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">MONDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周一&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周二&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周三&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">THURSDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周四&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">FRIDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周五&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">SATRUDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周六&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">WeekDay2</span> <span class="token constant">SUNDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token string">&quot;周日&quot;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token comment">// 构造方法私有</span>
    <span class="token keyword">private</span> <span class="token class-name">WeekDay2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;WeekDay2{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用enum关键字实现枚举" tabindex="-1"><a class="header-anchor" href="#使用enum关键字实现枚举" aria-hidden="true">#</a> 使用enum关键字实现枚举</h3><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p>枚举类型的定义使用关键字<span style="color:red;background:yellow;"><strong>enum</strong></span>，语法如下：</p><p><strong>枚举的定义语法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>访问权限修饰符<span class="token punctuation">]</span> <span class="token keyword">enum</span> 枚举类型名字<span class="token punctuation">{</span>
<span class="token comment">// 枚举体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ol><li><p>枚举类型的访问权限修饰符和class类是一致的。</p></li><li><p>enum是枚举定义关键字，等同于关键字class。</p></li><li><p>枚举类型的名字可以看成类名，同样需要大驼峰书写，同样“见名知意”。</p></li><li><p>枚举体的定义，实际上就是定义一个一个的常量，用&quot;逗号,&quot;隔开。枚举体中的单个常量的名字应该全部大写。并且放在枚举体的最上面</p></li></ol><p>按照上述的规则，我们定义一个包含周一到周日的常量的一个枚举类型：</p><p><strong>枚举的定义举例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 枚举类型，使用关键字enum</span>
<span class="token keyword">enum</span> <span class="token class-name">WeekDay</span> <span class="token punctuation">{</span>
    <span class="token comment">// 常量对象</span>
    <span class="token function">MONDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周一&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">TUESDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周二&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WEDNESDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周三&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">THURSDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周四&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FRIDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周五&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SATRUDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周六&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUNDAY</span><span class="token punctuation">(</span><span class="token string">&quot;周日&quot;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token comment">// 构造方法私有</span>
    <span class="token keyword">private</span> <span class="token class-name">WeekDay</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;WeekDay{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong></p><ul><li>常量对象需要写在枚举体的首位</li></ul><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h4><p>我们仍然以上述的星期常量为案例，使用枚举类型来改写一下这个方法：</p><p>注：switch当中是可以使用枚举类型的。</p><p><strong>使用枚举类型来替代常量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// main方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">WeekDay</span><span class="token punctuation">.</span><span class="token constant">TUESDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">WeekDay</span><span class="token punctuation">.</span><span class="token constant">FRIDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">WeekDay</span><span class="token punctuation">.</span><span class="token constant">SUNDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>

<span class="token punctuation">}</span>
<span class="token comment">// 测试方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">WeekDay</span> day<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token operator">:</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token constant">TUESDAY</span><span class="token operator">:</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">case</span> <span class="token constant">SUNDAY</span><span class="token operator">:</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="原理-了解" tabindex="-1"><a class="header-anchor" href="#原理-了解" aria-hidden="true">#</a> 原理(了解)</h4><p>枚举类型是一种引用数据类型，那么它和class类有什么关系呢？所谓枚举类型是一个什么类型呢？</p>`,88),D=n("strong",null,"“背地里偷偷做了一些事情”",-1),q=n("strong",null,"反编译工具CFR",-1),j={href:"https://blog.csdn.net/qq_40960093/article/details/102939408",target:"_blank",rel:"noopener noreferrer"},S=a(`<p>注意：在进行反编译的时候需要加参数</p><blockquote><p>--sugarenums false</p></blockquote><p>比如对WeekDayNum.class这个枚举类型编译后的class文件进行反编译的指令是：</p><blockquote><p>java -jar cfr-0.152.jar WeekDayNum.class --sugarenums false</p></blockquote><p>其中&quot;cfr-0.152.jar&quot;是CFR工具的版本号。</p><p>请按照以下步骤进行操作：</p><ol><li><p>定义一个枚举类型，比如：</p><p>枚举类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">WeekDayNum</span> <span class="token punctuation">{</span>
<span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span>
<span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译以上代码，得到WeekDayNum.class文件，并通过CFR反编译工具就可以得到编译器特殊处理后的代码：</p><p>编译器特殊处理后的枚举类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>javase<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WeekDayNum</span>
<span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeekDayNum</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">MONDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;MONDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;TUESDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;WEDNESDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">THURSDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;THURSDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">FRIDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;FRIDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">SATURDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;SATURDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* enum */</span> <span class="token class-name">WeekDayNum</span> <span class="token constant">SUNDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token string">&quot;SUNDAY&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token comment">/* synthetic */</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> $<span class="token constant">VALUES</span><span class="token punctuation">;</span>
      
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">WeekDayNum</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token constant">VALUES</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WeekDayNum</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">WeekDayNum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
    <span class="token keyword">private</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        $<span class="token constant">VALUES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>根据以上反编译代码，我们可以得出以下结论（枚举类型的原理）：</p>`,8),x=n("strong",null,"java.lang.Enum类",-1),_=a(`<li><p><span style="color:red;background:yellow;"><strong>枚举类型当中定义的常量，实际上都是这个枚举类型的“public static final”修饰的全局常量对象。</strong></span></p><p>所以，下列代码就可以写出来了：</p><p>枚举类型使用代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WeekDayNum</span> monday <span class="token operator">=</span> <span class="token class-name">WeekDayNum</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span>
<span class="token comment">// test方法需要一个枚举类型作为参数，实际上是需要传入该枚举类型的对象。而枚举类型当中定义的常量都是该类型的全局常量对象。</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">WeekDayNum</span><span class="token punctuation">.</span><span class="token constant">TUESDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法是private的</p></li><li><p>实际上编译器还自己创建了一个values[]对象数组来存放所有的常量对象，一个values( )方法，一个valueOf(String name )方法, 返回该字符串对应的常量对象</p></li>`,3),A=a('<p>所以枚举类型就是一个普通类，只不过编译器对使用enum关键字定义的类有特殊处理。</p><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h4><p><strong>需求:</strong></p><p>一个支付场景, 假设某个APP只支持支付宝, 微信, 银联, ApplePay 这四种固定支付方式, 需要记录用户使用的支付方式, 以便于统计用户支付习惯进行数据分析(用户画像)</p><p>我们可以使用枚举类型来描述这几种固定支付方式</p><figure><img src="'+r+`" alt="image-20230106164304853" tabindex="0" loading="lazy"><figcaption>image-20230106164304853</figcaption></figure><blockquote><p>定义枚举类型enum PayType来进行描述, 根据用户选择的支付方式进行记录</p><p>定义4个支付常量</p><p>ALIPAY, 支付宝支付</p><p>WECHATPAY, 微信支付</p><p>BANKPAY, 银联支付</p><p>APPLEPAY , 苹果支付</p></blockquote><p>Code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PaymentTypeEnum</span> <span class="token punctuation">{</span>
    <span class="token function">ZFB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;zfb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;支付宝支付&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WECHAT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;wechat&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;微信支付&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">BANK</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;bank&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;银联支付&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> label<span class="token punctuation">;</span>

    <span class="token class-name">PaymentTypeEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> label<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> label<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 根据id查找支付类型</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PaymentTypeEnum</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PaymentTypeEnum</span> type <span class="token operator">:</span> <span class="token class-name">PaymentTypeEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> type<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 支付类型测试</span>
        <span class="token comment">// 假设前端给我传过来一个支付类型id为2</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// 需要查找类型id为2的支付方式</span>
        <span class="token class-name">PaymentTypeEnum</span> type <span class="token operator">=</span> <span class="token class-name">PaymentTypeEnum</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">testPayment</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPayment</span><span class="token punctuation">(</span><span class="token class-name">PaymentTypeEnum</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">ZFB</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;采用支付宝支付,支付id=&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">WECHAT</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;采用采用微信支付,支付id=&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">BANK</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;采用采用银联信支付,支付id=&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用枚举的场景" tabindex="-1"><a class="header-anchor" href="#使用枚举的场景" aria-hidden="true">#</a> 使用枚举的场景</h4><ul><li>表示订单状态(已完成, 已支付, 未支付, 进行中, 已取消......)</li><li>表示支付方式(微信, 支付宝, 银行卡, 信用卡, ApplyPay , GooglePay, Paypal.....)</li><li>表示物流状态(已揽收, 运送中, 派件, 已签收......)</li><li>表示用户等级(普通用户, VIP, SVIP.......)</li><li>......</li></ul><h1 id="date日期类" tabindex="-1"><a class="header-anchor" href="#date日期类" aria-hidden="true">#</a> Date日期类</h1>`,12),I=n("strong",null,"日期表示",-1),N=n("p",null,"在JDK1.0版本时，就在java.util包下提供了 Date 类来表示日期，随着JDK版本迭代，这个类当中的方法大多已过时。但作为Java中基础的表示时间和日期的类，它仍然是常用类之一，非常有学习的必要。",-1),W=n("p",null,"而到了Java 8以后，Java中又提供了新的日期表示，提供了诸如：LocalDate、Calendar等新的日期类。",-1),E=n("p",null,"在绝大多数普通开发场景当中，表示时间，使用基础的Date类足够了，这里我们就来学习一下这个Date类，至于Java8之后提供的新日期类，大家可以根据实际情况，再去选择学习一下。",-1),Y=a(`<p>首先，提出一个问题，作为引子：Date类作为一个表示时间和日期的类，是如何表示时间和日期的呢？</p><p>Date类的对象表示一个特定的时刻瞬间，精确到毫秒，更具体一点来说，<span style="color:red;background:yellow;"><strong>Date类的对象中是通过存储一个long类型的时间戳进而来存储时间的。</strong></span></p><h2 id="时间戳" tabindex="-1"><a class="header-anchor" href="#时间戳" aria-hidden="true">#</a> 时间戳</h2><p>时间戳本身是一个比较复杂的概念，而Java语言当中所使用的时间戳主要是指Unix时间戳，它的涵义是：</p><blockquote><p>从格林威治时间（GMT时间，世界时的起点）1970年01月01日00时00分00秒（<strong>北京时间是1970年01月01日08时00分00秒</strong>）到现在的秒数（毫秒数）。</p></blockquote><p>在Java中存储的时间戳是一个long类型的毫秒数，即Date类当中的成员变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">long</span> fastTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h2><p>我们来看一下Date类目前还能够使用的，没有过时的两个构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 该构造函数使用当前日期和时间来创建对象	</span>
<span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 使用一个时间戳来创建对应时间的日期对象</span>
<span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该类的构造器源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 fastTime <span class="token operator">=</span> date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),T=n("strong",null,"fastTime",-1),U=n("p",null,"无参构造器当中使用了以下代码来获取一个毫秒值：",-1),O=n("blockquote",null,[n("p",null,"System.currentTimeMillis()")],-1),R=n("p",null,"这个方法是一个本地方法，该方法会根据操作系统时间来获取当前的时间戳。该方法还是挺有用的，大家可以记一下。",-1),C=n("h2",{id:"成员方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#成员方法","aria-hidden":"true"},"#"),s(" 成员方法")],-1),P=n("p",null,"首先，我们先介绍一下Date类的toString方法，该方法的作用是输出该Date对象所表示的时间，格式是：",-1),B=n("blockquote",null,[n("p",null,"星期 月份 天数 hh：mm：ss 时区缩写 年份"),n("p",null,"中国的时区缩写是CST（China Standard Time）")],-1),F=n("strong",null,"成员方法",-1),J=a(`<p>用一个时间戳来设置Date对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取当前Date对象的时间戳的毫秒值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> <span class="token function">getTime</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上方法大家在使用时，必然会觉得时间戳和现实的时间格式差距比较大，难以转换。这里提供一个时间戳的转换网站：</p>`,5),L={href:"https://tool.lu/timestamp/",target:"_blank",rel:"noopener noreferrer"},M=a(`<p>最后，再啰嗦一点就是：中国处在东八区，格林威治时间1970 年 1 月 1 日 00:00:00是中国的1970 年 1 月 1 日 08:00:00</p><p>比如我们使用以下方式设置一个Date对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印这个对象，会得到以下输出结果：</p><blockquote><p>Thu Jan 01 08:00:00 CST 1970</p></blockquote><h1 id="simpledateformat日期格式类" tabindex="-1"><a class="header-anchor" href="#simpledateformat日期格式类" aria-hidden="true">#</a> SimpleDateFormat日期格式类</h1><h2 id="构造方法-1" tabindex="-1"><a class="header-anchor" href="#构造方法-1" aria-hidden="true">#</a> 构造方法</h2><p><strong>SimpleDateFormat构造器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 以传入的字符串格式进行解析或者格式化日期</span>
<span class="token keyword">public</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该构造器的参数pattern用来表示日期字符串的格式，但这个格式不是乱写的，请参考以下格式：</p><ul><li>y：表示年，例如yyyy，表示千年年份</li><li>M：表示月份，例如MM，表示月份（最多12，两位数）</li><li>d：表示月份中的天数，例如dd，表示天数（最多31，两位数）</li><li>H：表示一天中的小时数，例如HH，表示小时数（最多24，两位数）</li><li>m：表示小时中的分钟数，例如mm，表示分钟数（最大59，两位数）</li><li>s：表示分钟里的秒数，例如ss，表示秒数（最大59，两位数）</li></ul><p>举一个例子来说，假如你希望按照下列格式表示时间：</p><blockquote><p>2022/10/10 10:10:10（2022年10月10日 十时十分十秒）</p></blockquote><p>这个pattern参数就应该写作：</p><blockquote><p>yyyy/MM/dd HH:mm:ss</p></blockquote><h2 id="成员方法-1" tabindex="-1"><a class="header-anchor" href="#成员方法-1" aria-hidden="true">#</a> 成员方法</h2><p>这里特别要强调的一点是：SimpleDateFormat对象是日期格式对象，它仅仅只是描述时间和日期的格式，并不能代表时间和日期。表示时间和日期我们仍然需要Date类来协助！</p><p>在使用日期格式类时，我们仅需要关注下面两个成员方法就足够了：</p><ol><li><p>将Date对象转换成对应日期字符串表示，该方法需要传入一个Date对象，然后返回一个日期字符串String对象。(Date ----&gt; String)</p><p>这个过程，一般称呼为“格式化”，使用以下方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将日期表示的字符串转换成对应的Date对象，该方法需要传入一个<span style="color:red;background:yellow;"><strong>“按照pattern格式编写的日期字符串”</strong></span>，然后返回一个Date对象。(String ----&gt; Date)</p><p>这个过程，一般称呼为“解析”，使用以下方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>上述两个方法在使用时都可能抛出异常，使用时按照规范使用即可。</p>`,20);function V(H,X){const t=c("font"),o=c("ExternalLinkIcon");return i(),u("div",null,[v,n("p",null,[s("Java引入"),e(t,{color:"red"},{default:p(()=>[m]),_:1}),s("的技术。")]),b,n("ol",null,[g,n("li",null,[y,h,e(t,{color:"red"},{default:p(()=>[s("**注：这里的i就是上面出现的Integer i引用。**")]),_:1}),w])]),f,n("p",null,[s("这个问题的答案很简单，枚举类型就是一个class类，只不过它比较特殊，编译器在"),e(t,{color:"red"},{default:p(()=>[D]),_:1}),s("。为了还原编译器对枚举类型做的“特殊操作”，我们需要"),e(t,{color:"red"},{default:p(()=>[q]),_:1}),s("来协助我们。")]),n("p",null,[s("关于反编译工具CFR的使用，比较简单，请参考文档："),n("a",j,[s("使用CFR进行反编译_Ramsey16k的博客-CSDN博客_cfr反编译"),e(o)])]),S,n("ol",null,[n("li",null,[n("p",null,[s("使用enum关键字定义枚举类型并编译后，编译器会为我们生成一个相关的final类，这个类继承了"),e(t,{color:"red"},{default:p(()=>[x]),_:1}),s(", 所以枚举类型就不能再继承其他类了, 实现接口可以.")])]),_]),A,n("blockquote",null,[n("p",null,[s("在JDK版本的迭代中，Java对"),e(t,{color:"red"},{default:p(()=>[I]),_:1}),s("的设计，可谓是改了又改，提供了很多个类来表示日期：")]),N,W,E]),Y,n("p",null,[s("所以实际上，Date类只有一个构造器，那就是给"),e(t,{color:"red"},{default:p(()=>[T]),_:1}),s("成员变量赋值的构造器。")]),U,O,R,C,P,B,n("p",null,[s("Date类的成员方法也大多过时了，需要大家了解的"),e(t,{color:"red"},{default:p(()=>[F]),_:1}),s("只有两个：")]),J,n("p",null,[n("a",L,[s("时间戳(Unix timestamp)转换工具 - 在线工具 (tool.lu)"),e(o)])]),M])}const Q=l(d,[["render",V],["__file","8_补充其他常用类.html.vue"]]);export{Q as default};
