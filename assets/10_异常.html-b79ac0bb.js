import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as e}from"./app-58d2c58f.js";const i="/assets/image-20221014113421323-d1f8206c.png",t="/assets/image-20221014115608435-f44972e8.png",l={},p=e('<p>学习目标:</p><ul><li>掌握异常的分类体系</li><li>熟悉常见异常</li><li>掌握异常的处理</li><li>掌握finally使用</li><li>掌握如何自定义异常</li></ul><h1 id="异常概述" tabindex="-1"><a class="header-anchor" href="#异常概述" aria-hidden="true">#</a> 异常概述</h1><h2 id="什么是异常" tabindex="-1"><a class="header-anchor" href="#什么是异常" aria-hidden="true">#</a> 什么是异常</h2><p>简单来说异常就是用来表示Java程序运行过程中的错误(信息)</p><p>网络中断, 用户输入信息, 读取不存在的文件</p><h2 id="异常体系与分类" tabindex="-1"><a class="header-anchor" href="#异常体系与分类" aria-hidden="true">#</a> 异常体系与分类</h2><figure><img src="'+i+'" alt="image-20221014113421323" tabindex="0" loading="lazy"><figcaption>image-20221014113421323</figcaption></figure><p>在Java中Throwable作为所有错误跟异常的祖先类</p><p><strong>根据错误的严重程度分</strong></p><ul><li>Error,: 比较严重的错误(代码处理不了, Jvm内部资源耗尽的错误) java.lang.StackOverflowError 栈溢出 java.lang.OutOfMemoryError 堆溢出</li><li>Exception: 错误程度小, 能够用代码进行处理 <ul><li>java.lang.ArithmeticException: / by zero 算数异常 /0</li><li>java.lang.NullPointerException 空指针异常</li><li>java.lang.ArrayIndexOutOfBoundsException 数组越界</li></ul></li></ul><p><strong>根据处理方式的不同</strong></p><ul><li>编译时异常 : 编译不通过(除了RuntimeException及其子类外的其他的异常)</li><li>运行时异常: 编译通过, 但是运行时可能会出错(RuntimeException及其子类)</li></ul><p>Exception是运行时异常还是编译时异常</p><ul><li>Exception是编译时异常和运行时异常的父类</li><li>在自定义异常的时候,Exception作为编译时异常</li></ul><h2 id="常见异常" tabindex="-1"><a class="header-anchor" href="#常见异常" aria-hidden="true">#</a> 常见异常</h2><figure><img src="'+t+`" alt="image-20221014115608435" tabindex="0" loading="lazy"><figcaption>image-20221014115608435</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>常见异常
    编译时异常:
        java.lang.CloneNotSupportedException 克隆异常
        java.io.FileNotFoundException  找不到文件
        java.io.IOException IO操作异常     
    运行时异常
        java.lang.ArithmeticException 算数异常
        java.lang.NullPointerException 空指针异常
        java.lang.ArrayIndexOutOfBoundsException 数组越界异常
        java.lang.NumberFormatException  数字格式化异常
        java.lang.ClassCastException 类型转换异常
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h1><h2 id="jvm默认处理机制" tabindex="-1"><a class="header-anchor" href="#jvm默认处理机制" aria-hidden="true">#</a> jvm默认处理机制</h2><p><strong>jvm默认异常处理流程</strong></p><ol><li>当我们代码在执行到，发生错误的地方。</li><li>一旦发生错误，jvm就会终止我们自己程序的运行，转而执行jvm自己的错误处理流程</li><li>在发生错误地方，收集错误信息，产生一个描述错误的对象</li><li>访问收集到的错误信息，将错误信息，输出到控制台窗口中(哪个线程,异常类型名, 异常原因, 哪个类哪个方法哪一行报错了)</li></ol><p><strong>执行过程</strong></p><ul><li>如果错误产生在main方法中 <ul><li>当我们的代码执行到错误行数之前，代码是正常执行的</li><li>当我们的代码执行到错误行数时，JVM会终止程序的执行，抛出一个该异常信息封装成的对象</li><li>将该对象中的异常信息，打印到控制台上，告诉程序员发生了什么问题</li><li>发生错误之后的语句，都不执行了</li></ul></li><li>如果错误产生在main方法当中的另一个方法中 <ul><li>当程序执行到该方法的错误行数时，JVM会终止程序的执行 <ul><li>向上给方法的调用者抛出一个该异常信息封装成的对象</li></ul></li><li>一直向上抛出，直到抛给main方法，main方法最终抛给JVM</li><li>发生异常之前的语句正常执行，但是之后的语句都不执行了</li></ul></li><li>默认处理机制仅针对运行时异常</li></ul><h2 id="捕获异常-自己处理" tabindex="-1"><a class="header-anchor" href="#捕获异常-自己处理" aria-hidden="true">#</a> 捕获异常,自己处理</h2><h3 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> try-catch</h3><h4 id="单分支" tabindex="-1"><a class="header-anchor" href="#单分支" aria-hidden="true">#</a> 单分支</h4><p>语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>方式一<span class="token operator">:</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token comment">// 可能出现异常的代码 </span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 对象名<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 对异常的处理操作 </span>
<span class="token punctuation">}</span>
方式二<span class="token operator">:</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token comment">// 可能出现异常的代码 </span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> <span class="token operator">|</span> 异常类型<span class="token number">2</span> <span class="token operator">|</span> 异常类型<span class="token number">3</span> <span class="token operator">|</span> 对象名<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 对异常的处理操作 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>try-catch的执行：</strong></p><ol><li>如果try中代码运行时发生了错误，jvm在发生错误的代码处，收集错误信息</li><li>try 块中在错误代码之后的代码，就不会在运行，jvm会跳转到相应的错误处理器中，<br> 执行开发者自己写的，错误处理代码</li><li>错误处理器中的代码，一旦执行完毕紧接着，程序继续正常执行，执行的是整个try代码块之后的代码</li></ol><p>注意：catch代码块中的代码，只有try块中的代码执行出错时，才会执行！</p><h4 id="捕获异常信息" tabindex="-1"><a class="header-anchor" href="#捕获异常信息" aria-hidden="true">#</a> 捕获异常信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取异常信息，返回字符串。</span>
<span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//获取异常类名和异常信息，返回字符串。</span>
<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//获取异常类名和异常信息，以及异常出现在程序中的位置,并打印到控制台</span>
<span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多分支" tabindex="-1"><a class="header-anchor" href="#多分支" aria-hidden="true">#</a> 多分支</h4><p>语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token comment">// 可能出现异常的代码 </span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 对象名<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 对异常的处理操作 </span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 对象名<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 对异常的处理操作 </span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 对象名<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 对异常的处理操作 </span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配规则：<br> 1.根据实际的异常对象的类型，和异常分支(异常处理器)声明的异常类型，从上到下一次做类型匹配<br> 2. 一旦通过类型匹配，发现实际异常对象的类型和Catch分支(异常处理器)声明的异常类型，类型匹配，就把异常对象交给这个异常分支（异常处理器）<br> 3. 多分支的异常处理的执行，有点类似于多分支if-else的执行，一次匹配，只会执行多个catch分支中的一个</p><p><strong>注意事项：</strong></p><p>如果说，在多catch分支的情况下，如果不同的catch分支，处理的异常类型，有父子关系<br> 那么就一定要注意，处理子类的异常分支写在前面，父类的异常分支写在后面</p><p>练习：<br> 单独处理除0异常,空指针,数组下标越界异常一起处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 出现异常的代码</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> <span class="token operator">|</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sssssss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抛出异常-上层处理" tabindex="-1"><a class="header-anchor" href="#抛出异常-上层处理" aria-hidden="true">#</a> 抛出异常,上层处理</h2><h3 id="throws关键字" tabindex="-1"><a class="header-anchor" href="#throws关键字" aria-hidden="true">#</a> throws关键字</h3><p>在方法定义时使用<br> 声明该方法可能抛出的异常<br> 对于编译时异常，可以在语法层面强制方法调用者处理该异常<br> 基本语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>修饰符  返回值 方法名(形参列表)  throws 异常列表 {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>解释说明:</strong></p><ul><li>异常列表: 异常类型1, 异常类型2, .... 用逗号隔开，列表中的异常不要出现父子关系，如果有，那么编译器只会强制处理父类</li><li>只是声明可能抛出,到底抛不抛,看代码</li><li>throws+运行时异常没有意义,因为运行时异常会自动抛出,不需要声明.throws+编译时异常才有意义,这实际上是编译异常处理的一种方式</li><li>在方法中声明throws+编译时异常,声明可能抛出编译时异常,该方法被调用时就要处理这个编译异常</li><li>处理编译时异常 <ul><li>方法内部try-catch</li><li>throws向上抛,如果在main中就别抛了,处理一下</li></ul></li></ul><p><strong>子类重写父类方法注意:</strong></p><ul><li>子类方法不能比父类抛出更多的编译时异常</li><li>父类如果抛出Exception,那么子类就可以随便抛出</li><li>建议子类重写的时候保持跟父类一样的异常列表</li></ul><h3 id="throw关键字" tabindex="-1"><a class="header-anchor" href="#throw关键字" aria-hidden="true">#</a> throw关键字</h3><p>在方法体中使用<br> 主动在程序中抛出异常<br> 每次只能抛出确定的某个异常对象</p><p>基本语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>throw 异常对象 (new 出来的)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意:</p><ul><li>throw+编译时异常,需要结合throws关键字</li></ul><h3 id="throws-vs-throw" tabindex="-1"><a class="header-anchor" href="#throws-vs-throw" aria-hidden="true">#</a> throws vs throw</h3><p><strong>throws</strong></p><ul><li>用在方法声明后面，跟的是异常类名</li><li>可以跟多个异常类名，用逗号隔开</li><li>表示抛出异常，由该方法的调用者来处理</li><li>throws表示出现异常的一种可能性，并不一定会发生这些异常</li></ul><p><strong>throw</strong></p><ul><li>用在方法体内，跟的是异常对象名</li><li>只能抛出一个异常对象</li><li>表示抛出异常，可以由方法体内的语句处理</li><li>throw则是抛出了异常，执行throw则一定抛出了某种异常</li></ul><h2 id="异常策略选择" tabindex="-1"><a class="header-anchor" href="#异常策略选择" aria-hidden="true">#</a> 异常策略选择</h2><p>总结一下，目前为止，我们学习过的异常处理策略有2种：</p><ul><li>捕获并处理try-catch</li><li>向上抛出 <ul><li>运行时异常，自动抛出，直道抛给jvm</li><li>编译时异常，需要结合throws关键字向上抛</li></ul></li></ul><p><strong>如何选择策略？</strong></p><ul><li>对于运行时异常，我们不应该写出产生这种异常的代码，应该在代码的测试阶段修正代码。</li><li>对于编译时异常，功能内部能够处理的就处理，如果不能够或者没有必要处理，就抛出。</li></ul><h2 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h2><p><strong>特点</strong></p><p>被finally控制的语句体一定会执行<br> 特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))</p><p><strong>作用</strong></p><p>用于释放资源，在IO流操作和数据库操作中会见到</p><p><strong>如何使用</strong></p><p>跟try-catch结合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>语法<span class="token operator">:</span>方式一
<span class="token keyword">try</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">finally</span><span class="token punctuation">{</span>
    <span class="token comment">// 一定执行</span>
<span class="token punctuation">}</span>

方式二<span class="token operator">:</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一些奇思妙想</p></blockquote><ul><li>try代码块如果有return <ul><li>程序会先执行完finally代码块，回过头执行try中的return</li></ul></li><li>catch代码块中如果有return，并且catch正常捕获异常执行 <ul><li>程序会先执行完finally代码块后，再回去执行catch中return，从catch代码块中结束方法</li></ul></li><li>finally代码中有return <ul><li>不会影响finally代码块执行</li></ul></li><li>如果finally和catch中都有return <ul><li>程序会直接从finally代码块中的return结束方法</li></ul></li><li>如果try中的异常不能正常捕获,但是finally中有return <ul><li><strong>注意此时程序会跳过这个异常，不会抛出异常给JVM报错</strong></li></ul></li></ul><p><strong>final与finally有什么区别</strong></p><ul><li>final关键字，最终的，最后的。可以修饰类 成员变量 成员方法 <ul><li>修饰类，该类不能被继承</li><li>修饰变量表示一个常量</li><li>修饰方法表示无法重写的方法</li></ul></li><li>finally代码块，和try...catch一起使用，具有必然执行的特点 <ul><li>异常处理体系当中，用于资源释放</li></ul></li></ul><h1 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常" aria-hidden="true">#</a> 自定义异常</h1><h2 id="为什么要自定义异常" tabindex="-1"><a class="header-anchor" href="#为什么要自定义异常" aria-hidden="true">#</a> 为什么要自定义异常</h2><p>现有的异常体系不满足需求</p><h2 id="如何自定义异常" tabindex="-1"><a class="header-anchor" href="#如何自定义异常" aria-hidden="true">#</a> 如何自定义异常</h2><h3 id="自定义编译时异常" tabindex="-1"><a class="header-anchor" href="#自定义编译时异常" aria-hidden="true">#</a> 自定义编译时异常</h3><ul><li>定义一个类继承Exception</li><li>构造方法</li></ul><h3 id="自定义运行时异常" tabindex="-1"><a class="header-anchor" href="#自定义运行时异常" aria-hidden="true">#</a> 自定义运行时异常</h3><ul><li>定义一个类继承RuntimeException</li><li>构造方法</li></ul><p>考试成绩必须在0-100分之间，如果有考试成绩不在这个范围之内，则认为成绩异常。</p><p>对于以上的异常，Java语言中显然没有一个对应的“考试分数异常超出范围”的异常，因此该异常需要我们自己来定义。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> _15exception<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cskaoyan<span class="token punctuation">.</span>_06define<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: 景天
 * <span class="token keyword">@date</span>: 2022/10/14 16:06
 **/</span>
<span class="token comment">/*
考试成绩必须在0-100分之间，如果有考试成绩不在这个范围之内，则认为成绩异常。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException1</span> myException1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            myException1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyException1</span> <span class="token punctuation">{</span>
        <span class="token comment">// 键盘接收分数</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判读一下是否在区间内</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> score <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果不在 抛出异常</span>
            <span class="token comment">// throw + 异常对象</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException1</span><span class="token punctuation">(</span><span class="token string">&quot;分数不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义编译时异常</span>
<span class="token keyword">class</span> <span class="token class-name">MyException1</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MyException1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MyException1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义运行时异常</span>
<span class="token keyword">class</span> <span class="token class-name">MyException2</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MyException2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MyException2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89),c=[p];function o(u,r){return a(),s("div",null,c)}const v=n(l,[["render",o],["__file","10_异常.html.vue"]]);export{v as default};
